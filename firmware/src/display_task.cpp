#if SK_DISPLAY
#include "display_task.h"
#include "semaphore_guard.h"
#include "util.h"

// #include "networking_task.h"

#include "font/roboto_light_60.h"
#include "font/roboto_thin_bold_24.h"
#include "font/roboto_thin_20.h"

static const uint8_t LEDC_CHANNEL_LCD_BACKLIGHT = 0;

// PROGMEM const unsigned char letter_A[] = {
//     0x00, 0xf0, 0x00, 0x01, 0xf0, 0x00, 0x01, 0xf8, 0x00, 0x01, 0xf8, 0x00, 0x03, 0xf8, 0x00, 0x03,
//     0xfc, 0x00, 0x07, 0xbc, 0x00, 0x07, 0x9e, 0x00, 0x07, 0x1e, 0x00, 0x0f, 0x0e, 0x00, 0x0f, 0x0f,
//     0x00, 0x0f, 0xff, 0x00, 0x1f, 0xff, 0x80, 0x1f, 0xff, 0x80, 0x3c, 0x07, 0x80, 0x3c, 0x03, 0xc0,
//     0x3c, 0x03, 0xc0, 0x78, 0x01, 0xe0, 0x78, 0x01, 0xe0, 0x70, 0x01, 0xe0};

// PROGMEM const unsigned char snowflake[] = {
//     0x00, 0x60, 0x00, 0x00, 0xe0, 0x00, 0x03, 0xf8, 0x00, 0x09, 0xfb, 0x00, 0x2c, 0xf3, 0x40, 0x7c,
//     0xe3, 0xe0, 0x7c, 0xe7, 0xc0, 0x3f, 0xff, 0xc0, 0x7f, 0xff, 0xc0, 0x03, 0xf8, 0x00, 0x03, 0xf8,
//     0x00, 0x7f, 0xff, 0xc0, 0x3f, 0xff, 0xc0, 0x7c, 0xe7, 0xc0, 0x7c, 0xe3, 0xe0, 0x2c, 0xf3, 0x40,
//     0x09, 0xfb, 0x00, 0x03, 0xf8, 0x00, 0x00, 0xe0, 0x00, 0x00, 0x60, 0x00};

// PROGMEM const unsigned char fire[] = {
//     0x01, 0x80, 0x00, 0x03, 0xc0, 0x00, 0x07, 0xee, 0x00, 0x0f, 0xfe, 0x00, 0x1f, 0xff, 0x00, 0x1f,
//     0xff, 0x80, 0x3f, 0xff, 0x80, 0x3f, 0xff, 0xc0, 0x7e, 0x7f, 0xc0, 0x7c, 0x7f, 0xc0, 0x7c, 0x33,
//     0xe0, 0x78, 0x03, 0xe0, 0x78, 0x03, 0xc0, 0x7c, 0x03, 0xc0, 0x3c, 0x07, 0xc0, 0x3e, 0x0f, 0x80,
//     0x1f, 0xff, 0x80, 0x0f, 0xff, 0x00, 0x07, 0xfe, 0x00, 0x01, 0xf8, 0x00};

// PROGMEM const unsigned char wind[] = {
//     0x00, 0x1f, 0x00, 0x00, 0x1f, 0x80, 0x00, 0x0f, 0x80, 0x00, 0x01, 0xc0, 0x00, 0x01, 0x80, 0xff,
//     0xff, 0x80, 0xff, 0xff, 0x00, 0x7f, 0xfc, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xe0, 0xff, 0xff,
//     0xe0, 0x00, 0x00, 0x70, 0x7e, 0x00, 0x70, 0xff, 0x80, 0x70, 0xff, 0xc3, 0xe0, 0x01, 0xc3, 0xe0,
//     0x01, 0xc0, 0x00, 0x07, 0xc0, 0x00, 0x0f, 0x80, 0x00, 0x0f, 0x00, 0x00};

// PROGMEM const unsigned char arrow_up_50[] = {
//     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
//     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xf0,
//     0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xfc, 0x00, 0x00,
//     0x00, 0x00, 0x00, 0x1f, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xff, 0x00, 0x00, 0x00, 0x00,
//     0x00, 0x7f, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x01, 0xff,
//     0xff, 0xe0, 0x00, 0x00, 0x00, 0x03, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x07, 0xff, 0xff, 0xf8,
//     0x00, 0x00, 0x00, 0x0f, 0xfb, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x1f, 0xf3, 0xf7, 0xfe, 0x00, 0x00,
//     0x00, 0x3f, 0xe3, 0xf3, 0xff, 0x00, 0x00, 0x00, 0x7f, 0xc3, 0xf1, 0xff, 0x80, 0x00, 0x00, 0xff,
//     0x83, 0xf0, 0xff, 0xc0, 0x00, 0x01, 0xff, 0x03, 0xf0, 0x7f, 0xe0, 0x00, 0x03, 0xfe, 0x03, 0xf0,
//     0x3f, 0xe0, 0x00, 0x03, 0xfc, 0x03, 0xf0, 0x1f, 0xf0, 0x00, 0x03, 0xf8, 0x03, 0xf0, 0x0f, 0xf0,
//     0x00, 0x03, 0xf0, 0x03, 0xf0, 0x07, 0xe0, 0x00, 0x01, 0xe0, 0x03, 0xf0, 0x03, 0xc0, 0x00, 0x00,
//     0x00, 0x03, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03,
//     0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xf0, 0x00,
//     0x00, 0x00, 0x00, 0x00, 0x03, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xf0, 0x00, 0x00, 0x00,
//     0x00, 0x00, 0x03, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00,
//     0x03, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xf0,
//     0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xf0, 0x00, 0x00,
//     0x00, 0x00, 0x00, 0x03, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xf0, 0x00, 0x00, 0x00, 0x00,
//     0x00, 0x03, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03,
//     0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xe0, 0x00,
//     0x00, 0x00, 0x00, 0x00, 0x01, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
//     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};

// PROGMEM const unsigned char arrow_down_50[] = {
//     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
//     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xe0,
//     0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xf0, 0x00, 0x00,
//     0x00, 0x00, 0x00, 0x03, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xf0, 0x00, 0x00, 0x00, 0x00,
//     0x00, 0x03, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03,
//     0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xf0, 0x00,
//     0x00, 0x00, 0x00, 0x00, 0x03, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xf0, 0x00, 0x00, 0x00,
//     0x00, 0x00, 0x03, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00,
//     0x03, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xf0,
//     0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xf0, 0x00, 0x00,
//     0x00, 0x00, 0x00, 0x03, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xf0, 0x00, 0x00, 0x00, 0x01,
//     0xe0, 0x03, 0xf0, 0x01, 0xc0, 0x00, 0x03, 0xf0, 0x03, 0xf0, 0x03, 0xe0, 0x00, 0x03, 0xf8, 0x03,
//     0xf0, 0x07, 0xe0, 0x00, 0x03, 0xfc, 0x03, 0xf0, 0x0f, 0xe0, 0x00, 0x03, 0xfe, 0x03, 0xf0, 0x1f,
//     0xe0, 0x00, 0x01, 0xff, 0x03, 0xf0, 0x3f, 0xc0, 0x00, 0x00, 0xff, 0x83, 0xf0, 0x7f, 0x80, 0x00,
//     0x00, 0x7f, 0xc3, 0xf0, 0xff, 0x00, 0x00, 0x00, 0x3f, 0xe3, 0xf1, 0xfe, 0x00, 0x00, 0x00, 0x1f,
//     0xf3, 0xf3, 0xfc, 0x00, 0x00, 0x00, 0x0f, 0xfb, 0xf7, 0xf8, 0x00, 0x00, 0x00, 0x07, 0xff, 0xff,
//     0xf0, 0x00, 0x00, 0x00, 0x03, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x01, 0xff, 0xff, 0xc0, 0x00,
//     0x00, 0x00, 0x00, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xff, 0x00, 0x00, 0x00, 0x00,
//     0x00, 0x3f, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f,
//     0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xe0, 0x00,
//     0x00, 0x00, 0x00, 0x00, 0x01, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
//     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};

// PROGMEM const unsigned char hvac_80[] = {
//     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
//     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
//     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
//     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
//     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
//     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
//     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x70, 0x00, 0x06, 0x00, 0x00, 0xfe, 0x00, 0x00, 0x00, 0x00,
//     0x68, 0x00, 0x0f, 0x00, 0x03, 0xb7, 0xc0, 0x00, 0x00, 0x00, 0x7e, 0x00, 0x3f, 0x00, 0x0f, 0xff,
//     0xf0, 0x00, 0x00, 0x00, 0xdf, 0x00, 0x7b, 0x00, 0x1e, 0xed, 0xb8, 0x00, 0x00, 0x00, 0xfb, 0xc1,
//     0xff, 0x80, 0x3f, 0xff, 0xec, 0x00, 0x00, 0x00, 0xef, 0xe3, 0xdb, 0x80, 0x77, 0x6e, 0xfe, 0x00,
//     0x00, 0x00, 0xbe, 0xf7, 0x7e, 0x80, 0xfd, 0xfb, 0xde, 0x00, 0x00, 0x00, 0xfb, 0xbf, 0xf7, 0x81,
//     0xdf, 0xbf, 0xfb, 0x00, 0x00, 0x00, 0xef, 0xfd, 0xdf, 0x81, 0xfb, 0x81, 0xbf, 0x00, 0x00, 0x01,
//     0xbe, 0xef, 0x7d, 0x81, 0xbe, 0x00, 0xf7, 0x80, 0x00, 0x01, 0xfb, 0xfd, 0xf7, 0xc3, 0xee, 0x00,
//     0x7d, 0x80, 0x00, 0x01, 0xef, 0xb7, 0xff, 0x43, 0x7c, 0x00, 0x6f, 0x80, 0x00, 0x1f, 0x7e, 0xff,
//     0xbd, 0xc3, 0xf4, 0x38, 0x3e, 0x80, 0x03, 0xf7, 0xf7, 0xdb, 0xef, 0xc3, 0xbc, 0x3c, 0x3b, 0x80,
//     0x1f, 0xde, 0xdf, 0x00, 0x7f, 0x43, 0xfc, 0x3c, 0x3f, 0x80, 0x1f, 0x7f, 0xfc, 0x00, 0x15, 0xc2,
//     0xd8, 0x34, 0x3e, 0xc0, 0x1b, 0xf6, 0xf0, 0x00, 0x0f, 0xc3, 0xfc, 0x3c, 0x37, 0x80, 0x0f, 0xdf,
//     0xb0, 0x08, 0x07, 0x43, 0xdc, 0x38, 0x3e, 0x80, 0x06, 0xfd, 0xe0, 0x7f, 0x03, 0xc3, 0x78, 0x3c,
//     0x3b, 0xc0, 0x07, 0xf7, 0xc1, 0xfb, 0xc1, 0xc3, 0xfc, 0x34, 0x3f, 0x80, 0x03, 0x7f, 0x43, 0xdf,
//     0xc1, 0x83, 0xdc, 0x3c, 0x3e, 0x80, 0x01, 0xdd, 0x83, 0x7e, 0xe0, 0xc3, 0x74, 0x38, 0x37, 0x80,
//     0x00, 0xf7, 0x87, 0xf7, 0xf0, 0xc3, 0xfc, 0x3c, 0x3f, 0x80, 0x00, 0xff, 0x86, 0xdf, 0x70, 0xc3,
//     0xbc, 0x34, 0x3d, 0x80, 0x00, 0x6e, 0x87, 0xfd, 0xd0, 0xc3, 0xec, 0x3c, 0x3f, 0xa2, 0x20, 0x3f,
//     0x87, 0xf7, 0xf0, 0xc2, 0xfc, 0x38, 0x36, 0x80, 0x00, 0x7b, 0x86, 0xbf, 0x70, 0xc3, 0xdc, 0x3c,
//     0x3f, 0xc0, 0x00, 0xfe, 0x87, 0xfb, 0xe0, 0xc3, 0xf4, 0x34, 0x3d, 0x80, 0x01, 0xdb, 0x87, 0xdf,
//     0xb0, 0xc3, 0x7c, 0x3c, 0x3f, 0x80, 0x01, 0xff, 0x82, 0xfb, 0xe1, 0xc3, 0xec, 0x38, 0x37, 0x80,
//     0x03, 0xde, 0xc1, 0xee, 0xc1, 0x43, 0xbc, 0x3c, 0x3e, 0x80, 0x07, 0x7b, 0xc0, 0xff, 0x81, 0xc3,
//     0xfc, 0x34, 0x3f, 0xc0, 0x0f, 0xff, 0xe0, 0x3b, 0x03, 0x82, 0xec, 0x3c, 0x3b, 0x80, 0x0d, 0xdb,
//     0x70, 0x00, 0x07, 0x83, 0xfc, 0x38, 0x3e, 0x80, 0x1f, 0x7f, 0xf8, 0x00, 0x0f, 0x03, 0xb4, 0x3c,
//     0x3b, 0xc0, 0x1d, 0xf7, 0xbe, 0x00, 0x3d, 0x07, 0xfc, 0x34, 0x3f, 0xe0, 0x0f, 0xde, 0xf7, 0x80,
//     0xff, 0x0e, 0xd8, 0x3c, 0x36, 0xe0, 0x01, 0x7f, 0xfe, 0xff, 0xd6, 0x0f, 0xf8, 0x38, 0x1f, 0xb0,
//     0x00, 0x03, 0xb7, 0xff, 0xfe, 0x1d, 0xd0, 0x3c, 0x1e, 0xf0, 0x00, 0x01, 0xff, 0xb6, 0xfa, 0x1f,
//     0x70, 0x34, 0x0f, 0xf0, 0x00, 0x01, 0xb6, 0xff, 0xae, 0x17, 0xe0, 0xff, 0x07, 0xb8, 0x00, 0x00,
//     0xff, 0xee, 0xfc, 0x1e, 0xc1, 0xfd, 0x06, 0xf8, 0x00, 0x00, 0xed, 0xbf, 0xfc, 0x3f, 0xc3, 0xd7,
//     0x87, 0xe8, 0x00, 0x00, 0xff, 0xfb, 0xb4, 0x37, 0x43, 0x7f, 0x87, 0xb8, 0x00, 0x00, 0xde, 0xee,
//     0xfc, 0x3d, 0xc3, 0xfd, 0xc2, 0xf8, 0x00, 0x00, 0xfb, 0xe3, 0xec, 0x37, 0xc3, 0xb7, 0x87, 0xe8,
//     0x00, 0x00, 0xef, 0x80, 0xfc, 0x3f, 0xc3, 0xff, 0x85, 0xb8, 0x00, 0x00, 0xbe, 0x00, 0x76, 0x1d,
//     0x81, 0x6d, 0x87, 0xf8, 0x00, 0x00, 0x7c, 0x00, 0x1e, 0x37, 0xe1, 0xff, 0x07, 0xe8, 0x00, 0x00,
//     0x70, 0x00, 0x0e, 0x1f, 0x60, 0xf6, 0x0e, 0xb8, 0x00, 0x00, 0x30, 0x00, 0x04, 0x1d, 0xf0, 0x18,
//     0x0b, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xe0, 0x00, 0x1f, 0xf0, 0x00, 0x00, 0x00, 0x00,
//     0x00, 0x0f, 0x7c, 0x00, 0x3e, 0xd0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0d, 0xfe, 0x00, 0xf7, 0xe0,
//     0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xdb, 0xc7, 0xff, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03,
//     0x7f, 0xff, 0x5b, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xf6, 0xfd, 0xff, 0x80, 0x00, 0x00,
//     0x00, 0x00, 0x00, 0x01, 0xdf, 0xb7, 0xf6, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7e, 0xff,
//     0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3b, 0xee, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00,
//     0x00, 0x00, 0x0f, 0xbf, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xfb, 0x80, 0x00,
//     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
//     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
//     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
//     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
//     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};

// PROGMEM const unsigned char hvac_40[] = {
//     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
//     0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x06, 0x00, 0x00, 0xe0, 0x70, 0x1f, 0x80, 0x00, 0xf0,
//     0xf0, 0x79, 0xe0, 0x00, 0xff, 0xf0, 0x60, 0x60, 0x00, 0xcf, 0x18, 0xc0, 0x30, 0x01, 0x86, 0x18,
//     0xc4, 0x30, 0x01, 0x80, 0x18, 0xc6, 0x30, 0x3f, 0x80, 0x1c, 0xc6, 0x30, 0x7e, 0x0f, 0x84, 0xc6,
//     0x30, 0x30, 0x3f, 0xc0, 0xc6, 0x30, 0x18, 0x70, 0xe0, 0xc6, 0x30, 0x1c, 0x60, 0x60, 0xc6, 0x30,
//     0x0c, 0x60, 0x60, 0xc6, 0x30, 0x0e, 0x60, 0x30, 0xc6, 0x30, 0x0c, 0x60, 0x60, 0xc6, 0x30, 0x18,
//     0x60, 0x60, 0xc6, 0x30, 0x38, 0x39, 0xc0, 0xc6, 0x30, 0x30, 0x1f, 0xc1, 0xc6, 0x38, 0x7f, 0x8f,
//     0x03, 0x86, 0x1c, 0x0f, 0x80, 0x03, 0x06, 0x0c, 0x01, 0x80, 0x07, 0x1f, 0x8c, 0x00, 0xc6, 0x06,
//     0x39, 0xc6, 0x00, 0xdf, 0x86, 0x30, 0xc6, 0x00, 0xf9, 0xc6, 0x30, 0xc6, 0x00, 0xf0, 0xc6, 0x30,
//     0xc6, 0x00, 0xc0, 0x06, 0x1f, 0x86, 0x00, 0x00, 0x03, 0x0f, 0x0c, 0x00, 0x00, 0x03, 0x00, 0x1c,
//     0x00, 0x00, 0x01, 0x80, 0x18, 0x00, 0x00, 0x00, 0xe0, 0x70, 0x00, 0x00, 0x00, 0x7f, 0xe0, 0x00,
//     0x00, 0x00, 0x1f, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
//     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};

// PROGMEM const unsigned char shades_40[] = {
//     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f,
//     0xff, 0xff, 0xff, 0xf8, 0x3f, 0xff, 0xff, 0xff, 0xfe, 0x7f, 0xff, 0xff, 0xff, 0xfe, 0x70, 0x00,
//     0x00, 0x00, 0x06, 0x70, 0x00, 0x00, 0x00, 0x06, 0x7f, 0xff, 0xff, 0xff, 0xfe, 0x3f, 0xff, 0xff,
//     0xff, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
//     0x00, 0x30, 0x00, 0x00, 0x00, 0x0c, 0x30, 0x00, 0x00, 0x00, 0x0e, 0x7f, 0xff, 0xff, 0xff, 0xfe,
//     0x7f, 0xff, 0xff, 0xff, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
//     0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x18, 0x38, 0x00, 0x00, 0x00, 0x1c, 0x38, 0x00,
//     0x00, 0x00, 0x0c, 0x30, 0x00, 0x00, 0x00, 0x0c, 0x70, 0x00, 0x00, 0x00, 0x0e, 0x7f, 0xff, 0xff,
//     0xff, 0xfe, 0x3f, 0xff, 0xff, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
//     0x00, 0x18, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x1c, 0x38, 0x00, 0x00, 0x00, 0x1c,
//     0x30, 0x00, 0x00, 0x00, 0x0c, 0x30, 0x00, 0x00, 0x00, 0x0e, 0x7f, 0xff, 0xff, 0xff, 0xfe, 0x7f,
//     0xff, 0xff, 0xff, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
//     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};

// PROGMEM const unsigned char shades_80[] = {
//     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
//     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
//     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
//     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
//     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x24, 0x92, 0x49, 0x24, 0x92, 0x49, 0x24, 0x92, 0x40,
//     0x0f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x0e, 0xff, 0xff, 0xff, 0xff, 0xff,
//     0xff, 0xff, 0xff, 0xb8, 0x1f, 0xd5, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0xfc, 0x1b, 0x7f,
//     0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xdc, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
//     0xfe, 0xf4, 0x1d, 0xed, 0xb6, 0xdb, 0x6d, 0xb6, 0xdb, 0x6d, 0xb7, 0xdc, 0x1f, 0xbf, 0xff, 0xff,
//     0xff, 0xff, 0xff, 0xff, 0xfe, 0xf8, 0x0e, 0xfb, 0x6d, 0xb6, 0xdb, 0x6d, 0xb6, 0xdb, 0x6f, 0xf8,
//     0x03, 0xef, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfb, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
//     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
//     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
//     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xff, 0xff, 0xff,
//     0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x03, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0,
//     0x07, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xe0, 0x07, 0x7f, 0xff, 0xff, 0xff, 0xff,
//     0xff, 0xff, 0xff, 0xb0, 0x07, 0xf7, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0xf0, 0x0e, 0xdf,
//     0xdf, 0xdf, 0xdf, 0xdf, 0xdf, 0xdf, 0xde, 0xf0, 0x0f, 0xfd, 0xfd, 0xfd, 0xfd, 0xfd, 0xfd, 0xfd,
//     0xff, 0xb8, 0x0f, 0x77, 0xbf, 0x77, 0xbf, 0x77, 0xbf, 0x77, 0xbb, 0xf8, 0x1d, 0xff, 0xf7, 0xff,
//     0xf7, 0xff, 0xf7, 0xff, 0xfe, 0xd8, 0x1f, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdb, 0xfc,
//     0x1f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0xb4, 0x1b, 0xf7, 0xf7, 0xf7, 0xf7, 0xf7,
//     0xf7, 0xf7, 0xee, 0xfc, 0x1f, 0xbd, 0xde, 0xfd, 0xde, 0xfd, 0xde, 0xfd, 0xff, 0xe8, 0x06, 0xff,
//     0x7f, 0xdf, 0x7f, 0xdf, 0x7f, 0xdf, 0x76, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
//     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
//     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
//     0x03, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xc0, 0x03, 0x7f, 0xff, 0xff, 0xff, 0xff,
//     0xff, 0xff, 0xff, 0xe0, 0x03, 0xf7, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x60, 0x07, 0xdf,
//     0xdf, 0xdf, 0xdf, 0xdf, 0xdf, 0xdf, 0xdf, 0xe0, 0x07, 0x7d, 0xfd, 0xfd, 0xfd, 0xfd, 0xfd, 0xfd,
//     0xfd, 0xb0, 0x07, 0xf7, 0x77, 0xbf, 0x77, 0xbf, 0x77, 0xbf, 0x77, 0xf0, 0x0e, 0xdf, 0xff, 0xf7,
//     0xff, 0xf7, 0xff, 0xf7, 0xff, 0x78, 0x0f, 0xfd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xe8,
//     0x1d, 0xf7, 0xf7, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0xf8, 0x17, 0xbf, 0x7f, 0xf7, 0xf7, 0xf7,
//     0xf7, 0xf7, 0xf7, 0x6c, 0x1f, 0xfd, 0xdd, 0xde, 0xfd, 0xde, 0xfd, 0xde, 0xfd, 0xfc, 0x1e, 0xd7,
//     0xff, 0xff, 0xdf, 0x7f, 0xdf, 0x7f, 0xdf, 0xdc, 0x1f, 0xff, 0x77, 0x77, 0x77, 0xf7, 0x77, 0xf7,
//     0x77, 0x74, 0x0d, 0xbd, 0xfd, 0xfd, 0xfe, 0xfd, 0xfe, 0xfd, 0xfd, 0xf8, 0x05, 0x56, 0x96, 0x96,
//     0xab, 0x4b, 0x55, 0x96, 0xab, 0x50, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
//     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
//     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xff,
//     0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x03, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
//     0xff, 0xe0, 0x07, 0xbb, 0xbb, 0xbb, 0xbb, 0xbb, 0xbb, 0xbb, 0xbb, 0xa0, 0x05, 0xff, 0xff, 0xff,
//     0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x07, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xe0,
//     0x0f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x70, 0x0d, 0xf7, 0xf7, 0xf7, 0xf7, 0xf7,
//     0xf7, 0xf7, 0xf7, 0xf8, 0x0f, 0xdd, 0xde, 0xfd, 0xde, 0xfd, 0xde, 0xfd, 0xde, 0xd8, 0x1b, 0x7f,
//     0xff, 0xdf, 0xff, 0xdf, 0xff, 0xdf, 0xff, 0xf8, 0x1f, 0xf7, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77,
//     0x76, 0xec, 0x1d, 0xdf, 0xdd, 0xfd, 0xfd, 0xfd, 0xfd, 0xfd, 0xff, 0xbc, 0x1f, 0xfd, 0xff, 0xdf,
//     0xdf, 0xdf, 0xdf, 0xdf, 0xdb, 0xf8, 0x1b, 0x77, 0x77, 0x7b, 0xf7, 0x7b, 0xf7, 0x7b, 0xff, 0x7c,
//     0x0f, 0xdf, 0xff, 0xff, 0x7d, 0xff, 0x7d, 0xff, 0x6d, 0xe8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
//     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
//     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
//     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
//     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};

// PROGMEM const unsigned char lamp_solid[] = {
//     0x00, 0x00, 0x00, 0x00, 0x1f, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 0xff,
//     0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00,
//     0x00, 0x1f, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xff, 0xff, 0xfe, 0x00,
//     0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 0xff, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x03, 0xff,
//     0xff, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x07, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x00, 0x00,
//     0x00, 0x00, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xff, 0xff, 0xff,
//     0xff, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xff, 0xf0, 0x7f, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x00,
//     0x3f, 0xff, 0x80, 0x3f, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xfe, 0x00, 0x3f, 0xff, 0xfe,
//     0x00, 0x00, 0x00, 0x00, 0xff, 0xf8, 0x00, 0x3f, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0xff, 0xf0,
//     0x00, 0x7f, 0xff, 0xff, 0x00, 0x00, 0x00, 0x01, 0xff, 0xe0, 0x0f, 0xff, 0xff, 0xff, 0x80, 0x00,
//     0x00, 0x01, 0xff, 0xc0, 0x3f, 0xff, 0xff, 0xff, 0x80, 0x00, 0x00, 0x03, 0xff, 0xc0, 0xff, 0xff,
//     0xff, 0xff, 0xc0, 0x00, 0x00, 0x03, 0xff, 0x81, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x03,
//     0xff, 0x03, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x07, 0xff, 0x03, 0xff, 0xff, 0xff, 0xff,
//     0xe0, 0x00, 0x00, 0x07, 0xff, 0x07, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x07, 0xfe, 0x07,
//     0xff, 0xff, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x07, 0xfe, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x00,
//     0x00, 0x07, 0xfe, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x07, 0xfe, 0x0f, 0xff, 0xff,
//     0xff, 0xff, 0xe0, 0x00, 0x00, 0x07, 0xfe, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x07,
//     0xfe, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x07, 0xfe, 0x1f, 0xff, 0xff, 0xff, 0xff,
//     0xe0, 0x00, 0x00, 0x07, 0xff, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x07, 0xff, 0xff,
//     0xff, 0xff, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x07, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x00,
//     0x00, 0x07, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x07, 0xff, 0xff, 0xff, 0xff,
//     0xff, 0xff, 0xe0, 0x00, 0x00, 0x07, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x03,
//     0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x03, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
//     0xc0, 0x00, 0x00, 0x03, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x01, 0xff, 0xff,
//     0xff, 0xff, 0xff, 0xff, 0x80, 0x00, 0x00, 0x01, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 0x00,
//     0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff,
//     0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x00, 0x00, 0x00, 0x00,
//     0x3f, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xfc,
//     0x00, 0x00, 0x00, 0x00, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xff,
//     0xff, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x07, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x00, 0x00,
//     0x00, 0x00, 0x07, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x03, 0xff, 0xff, 0xff,
//     0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 0xff, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00,
//     0x01, 0xff, 0xff, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0x00,
//     0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xff, 0xff, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f,
//     0xff, 0xff, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xff, 0xff, 0xfc, 0x00, 0x00, 0x00,
//     0x00, 0x00, 0x00, 0x3f, 0xff, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xff, 0xff,
//     0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00,
//     0x00, 0x1f, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
//     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
//     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
//     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xff, 0xff,
//     0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00,
//     0x00, 0x1f, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xff, 0xff, 0xf0, 0x00,
//     0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f,
//     0xff, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x00,
//     0x00, 0x00, 0x00, 0x07, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xff, 0xff,
//     0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00,
//     0x00, 0x03, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 0xff, 0x80, 0x00,
//     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
//     0x3f, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xf0, 0x00, 0x00, 0x00, 0x00};

// PROGMEM const unsigned char lamp_regular[] = {
//     0x00, 0x00, 0x00, 0x00, 0x3f, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xff, 0xff,
//     0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00,
//     0x00, 0x3f, 0xff, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0x00,
//     0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 0xff, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x03, 0xff,
//     0xff, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x07, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x00, 0x00,
//     0x00, 0x00, 0x0f, 0xff, 0xe0, 0x07, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xff, 0x00, 0x00,
//     0xff, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xfc, 0x00, 0x00, 0x3f, 0xfc, 0x00, 0x00, 0x00, 0x00,
//     0x7f, 0xf0, 0x00, 0x00, 0x0f, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xe0, 0x00, 0x00, 0x07, 0xfe,
//     0x00, 0x00, 0x00, 0x00, 0xff, 0xc0, 0x00, 0x00, 0x03, 0xff, 0x00, 0x00, 0x00, 0x00, 0xff, 0x80,
//     0x00, 0x00, 0x01, 0xff, 0x00, 0x00, 0x00, 0x01, 0xff, 0x00, 0x0f, 0xc0, 0x00, 0xff, 0x80, 0x00,
//     0x00, 0x01, 0xff, 0x00, 0x3f, 0xe0, 0x00, 0xff, 0x80, 0x00, 0x00, 0x03, 0xfe, 0x00, 0xff, 0xe0,
//     0x00, 0x7f, 0xc0, 0x00, 0x00, 0x03, 0xfc, 0x01, 0xff, 0xe0, 0x00, 0x3f, 0xc0, 0x00, 0x00, 0x03,
//     0xfc, 0x03, 0xff, 0xc0, 0x00, 0x3f, 0xc0, 0x00, 0x00, 0x07, 0xf8, 0x07, 0xfc, 0x00, 0x00, 0x1f,
//     0xe0, 0x00, 0x00, 0x07, 0xf8, 0x07, 0xf0, 0x00, 0x00, 0x1f, 0xe0, 0x00, 0x00, 0x07, 0xf8, 0x0f,
//     0xe0, 0x00, 0x00, 0x1f, 0xe0, 0x00, 0x00, 0x07, 0xf8, 0x0f, 0xc0, 0x00, 0x00, 0x1f, 0xe0, 0x00,
//     0x00, 0x0f, 0xf0, 0x0f, 0x80, 0x00, 0x00, 0x0f, 0xf0, 0x00, 0x00, 0x0f, 0xf0, 0x1f, 0x80, 0x00,
//     0x00, 0x0f, 0xf0, 0x00, 0x00, 0x0f, 0xf0, 0x1f, 0x80, 0x00, 0x00, 0x0f, 0xf0, 0x00, 0x00, 0x0f,
//     0xf0, 0x1f, 0x80, 0x00, 0x00, 0x0f, 0xf0, 0x00, 0x00, 0x0f, 0xf0, 0x1f, 0x80, 0x00, 0x00, 0x0f,
//     0xf0, 0x00, 0x00, 0x0f, 0xf0, 0x0f, 0x00, 0x00, 0x00, 0x0f, 0xf0, 0x00, 0x00, 0x0f, 0xf0, 0x00,
//     0x00, 0x00, 0x00, 0x0f, 0xe0, 0x00, 0x00, 0x07, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xe0, 0x00,
//     0x00, 0x07, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xe0, 0x00, 0x00, 0x07, 0xf8, 0x00, 0x00, 0x00,
//     0x00, 0x1f, 0xe0, 0x00, 0x00, 0x07, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xe0, 0x00, 0x00, 0x03,
//     0xfc, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xc0, 0x00, 0x00, 0x03, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x3f,
//     0xc0, 0x00, 0x00, 0x03, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xc0, 0x00, 0x00, 0x01, 0xff, 0x00,
//     0x00, 0x00, 0x00, 0xff, 0x80, 0x00, 0x00, 0x01, 0xff, 0x00, 0x00, 0x00, 0x00, 0xff, 0x80, 0x00,
//     0x00, 0x00, 0xff, 0x80, 0x00, 0x00, 0x01, 0xff, 0x00, 0x00, 0x00, 0x00, 0xff, 0xc0, 0x00, 0x00,
//     0x03, 0xff, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xc0, 0x00, 0x00, 0x03, 0xfe, 0x00, 0x00, 0x00, 0x00,
//     0x7f, 0xe0, 0x00, 0x00, 0x07, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xf0, 0x00, 0x00, 0x0f, 0xfc,
//     0x00, 0x00, 0x00, 0x00, 0x1f, 0xf8, 0x00, 0x00, 0x1f, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xf8,
//     0x00, 0x00, 0x1f, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xfc, 0x00, 0x00, 0x3f, 0xf0, 0x00, 0x00,
//     0x00, 0x00, 0x07, 0xfe, 0x00, 0x00, 0x7f, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x03, 0xfe, 0x00, 0x00,
//     0x7f, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x03, 0xff, 0x00, 0x00, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00,
//     0x01, 0xff, 0x00, 0x00, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x80, 0x01, 0xff, 0x00,
//     0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x80, 0x01, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f,
//     0xc0, 0x03, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xc0, 0x03, 0xfe, 0x00, 0x00, 0x00,
//     0x00, 0x00, 0x00, 0x3f, 0xc0, 0x03, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xc0, 0x03,
//     0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xe0, 0x07, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00,
//     0x00, 0x1f, 0xe0, 0x07, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
//     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
//     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
//     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xff, 0xff,
//     0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00,
//     0x00, 0x1f, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xff, 0xff, 0xf8, 0x00,
//     0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f,
//     0xff, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x00,
//     0x00, 0x00, 0x00, 0x0f, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xff, 0xff,
//     0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00,
//     0x00, 0x03, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 0xff, 0x80, 0x00,
//     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
//     0x3f, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xf0, 0x00, 0x00, 0x00, 0x00};

// PROGMEM const unsigned char lamp_regular_40[] = {
//     0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0x03, 0xff, 0xc0, 0x00, 0x00, 0x0f, 0xff, 0xf0, 0x00, 0x00,
//     0x1f, 0xff, 0xf8, 0x00, 0x00, 0x3f, 0x00, 0xfc, 0x00, 0x00, 0x7e, 0x00, 0x7e, 0x00, 0x00, 0xf8,
//     0x00, 0x1f, 0x00, 0x00, 0xf0, 0x18, 0x0f, 0x00, 0x01, 0xf0, 0xf8, 0x0f, 0x80, 0x01, 0xe1, 0xf8,
//     0x07, 0x80, 0x01, 0xe1, 0xc0, 0x07, 0x80, 0x03, 0xc3, 0x80, 0x03, 0xc0, 0x03, 0xc3, 0x80, 0x03,
//     0xc0, 0x03, 0xc3, 0x00, 0x03, 0xc0, 0x03, 0xc3, 0x00, 0x03, 0xc0, 0x03, 0xc0, 0x00, 0x03, 0xc0,
//     0x03, 0xc0, 0x00, 0x07, 0xc0, 0x01, 0xe0, 0x00, 0x07, 0x80, 0x01, 0xe0, 0x00, 0x07, 0x80, 0x01,
//     0xf0, 0x00, 0x0f, 0x80, 0x00, 0xf8, 0x00, 0x1f, 0x00, 0x00, 0x78, 0x00, 0x1e, 0x00, 0x00, 0x7c,
//     0x00, 0x3e, 0x00, 0x00, 0x3e, 0x00, 0x7c, 0x00, 0x00, 0x1e, 0x00, 0x78, 0x00, 0x00, 0x1f, 0x00,
//     0xf8, 0x00, 0x00, 0x0f, 0x00, 0xf0, 0x00, 0x00, 0x07, 0x81, 0xe0, 0x00, 0x00, 0x07, 0x81, 0xe0,
//     0x00, 0x00, 0x07, 0x81, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
//     0x00, 0x03, 0xff, 0xc0, 0x00, 0x00, 0x03, 0xff, 0xc0, 0x00, 0x00, 0x03, 0xff, 0xc0, 0x00, 0x00,
//     0x03, 0xff, 0xc0, 0x00, 0x00, 0x03, 0xff, 0xc0, 0x00, 0x00, 0x01, 0xff, 0x80, 0x00, 0x00, 0x00,
//     0xff, 0x00, 0x00, 0x00, 0x00, 0x7e, 0x00, 0x00};

// PROGMEM const unsigned char spotify_80[] = {
//     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
//     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
//     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
//     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f,
//     0xff, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xff, 0xff, 0xfc, 0x00, 0x00, 0x00,
//     0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xff, 0xff, 0xff,
//     0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00,
//     0x1f, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xfc,
//     0x00, 0x00, 0x00, 0x00, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x00, 0x00, 0x00, 0x01, 0xff, 0xff,
//     0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x03, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 0x00,
//     0x00, 0x03, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x07, 0xff, 0xff, 0xff, 0xff,
//     0xff, 0xff, 0xe0, 0x00, 0x00, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x1f,
//     0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
//     0xf8, 0x00, 0x00, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x00, 0x00, 0x7f, 0xff, 0xff,
//     0xff, 0xff, 0xff, 0xff, 0xfc, 0x00, 0x00, 0x7f, 0xff, 0x00, 0x00, 0x03, 0xff, 0xff, 0xfe, 0x00,
//     0x00, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x1f, 0xff, 0xfe, 0x00, 0x00, 0xff, 0x80, 0x00, 0x00, 0x00,
//     0x03, 0xff, 0xff, 0x00, 0x01, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xff, 0x00, 0x01, 0xff,
//     0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xff, 0x00, 0x01, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03,
//     0xff, 0x80, 0x03, 0xff, 0x00, 0x00, 0xf0, 0x00, 0x00, 0x00, 0xff, 0x80, 0x03, 0xff, 0x80, 0xff,
//     0xff, 0xfc, 0x00, 0x00, 0x7f, 0x80, 0x03, 0xff, 0xef, 0xff, 0xff, 0xff, 0xe0, 0x00, 0x7f, 0xc0,
//     0x03, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x00, 0x7f, 0xc0, 0x07, 0xff, 0xff, 0xff, 0xff, 0xff,
//     0xff, 0x80, 0x7f, 0xc0, 0x07, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x7f, 0xc0, 0x07, 0xff,
//     0xff, 0x00, 0x00, 0x0f, 0xff, 0xf8, 0xff, 0xc0, 0x07, 0xff, 0xf0, 0x00, 0x00, 0x00, 0xff, 0xff,
//     0xff, 0xc0, 0x07, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x1f, 0xff, 0xff, 0xe0, 0x07, 0xff, 0xc0, 0x00,
//     0x00, 0x00, 0x03, 0xff, 0xff, 0xe0, 0x07, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xe0,
//     0x07, 0xff, 0xc0, 0x01, 0xf8, 0x00, 0x00, 0x3f, 0xff, 0xe0, 0x07, 0xff, 0xe0, 0xff, 0xff, 0xf0,
//     0x00, 0x0f, 0xff, 0xe0, 0x07, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x0f, 0xff, 0xc0, 0x07, 0xff,
//     0xff, 0xff, 0xff, 0xff, 0xe0, 0x0f, 0xff, 0xc0, 0x07, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x0f,
//     0xff, 0xc0, 0x03, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x0f, 0xff, 0xc0, 0x03, 0xff, 0xff, 0xf0,
//     0x00, 0x7f, 0xff, 0xbf, 0xff, 0xc0, 0x03, 0xff, 0xfc, 0x00, 0x00, 0x03, 0xff, 0xff, 0xff, 0xc0,
//     0x03, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x7f, 0xff, 0xff, 0x80, 0x01, 0xff, 0xf0, 0x00, 0x00, 0x00,
//     0x1f, 0xff, 0xff, 0x80, 0x01, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x07, 0xff, 0xff, 0x80, 0x01, 0xff,
//     0xf0, 0x7f, 0xff, 0xe0, 0x01, 0xff, 0xff, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x00, 0xff,
//     0xff, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 0xff, 0xff, 0x00, 0x00, 0xff, 0xff, 0xff,
//     0xff, 0xff, 0xe0, 0xff, 0xfe, 0x00, 0x00, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xf9, 0xff, 0xfe, 0x00,
//     0x00, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x00, 0x00, 0x3f, 0xff, 0xff, 0xff, 0xff,
//     0xff, 0xff, 0xf8, 0x00, 0x00, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x1f,
//     0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
//     0xe0, 0x00, 0x00, 0x07, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x03, 0xff, 0xff,
//     0xff, 0xff, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x01, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 0x00,
//     0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xff, 0xff, 0xff,
//     0xff, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x00,
//     0x1f, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x07, 0xff, 0xff, 0xff, 0xff, 0xe0,
//     0x00, 0x00, 0x00, 0x00, 0x03, 0xff, 0xff, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff,
//     0xff, 0xff, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x00,
//     0x00, 0x00, 0x00, 0x07, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xfc,
//     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
//     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
//     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
//     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};

// PROGMEM const unsigned char spotify_40[] = {
//     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
//     0x01, 0xff, 0x80, 0x00, 0x00, 0x0f, 0xff, 0xe0, 0x00, 0x00, 0x1f, 0xff, 0xf8, 0x00, 0x00, 0x7f,
//     0xff, 0xfe, 0x00, 0x00, 0xff, 0xff, 0xff, 0x00, 0x01, 0xff, 0xff, 0xff, 0x80, 0x03, 0xff, 0xff,
//     0xff, 0xc0, 0x07, 0xff, 0xff, 0xff, 0xc0, 0x07, 0xff, 0xff, 0xff, 0xe0, 0x0f, 0xe0, 0x00, 0xff,
//     0xe0, 0x0f, 0x00, 0x00, 0x0f, 0xf0, 0x1f, 0x00, 0x00, 0x03, 0xf0, 0x1f, 0x03, 0xf8, 0x00, 0xf8,
//     0x1f, 0xff, 0xff, 0xc0, 0x78, 0x1f, 0xff, 0xff, 0xf8, 0x78, 0x1f, 0xe0, 0x01, 0xff, 0xf8, 0x1f,
//     0x80, 0x00, 0x3f, 0xf8, 0x1f, 0x80, 0x00, 0x07, 0xf8, 0x1f, 0xdf, 0xfe, 0x03, 0xf8, 0x1f, 0xff,
//     0xff, 0xc3, 0xf8, 0x1f, 0xff, 0xff, 0xf3, 0xf8, 0x1f, 0xc0, 0x00, 0xff, 0xf8, 0x1f, 0xc0, 0x00,
//     0x3f, 0xf0, 0x0f, 0xdf, 0xfc, 0x0f, 0xf0, 0x0f, 0xff, 0xff, 0x8f, 0xf0, 0x07, 0xff, 0xff, 0xff,
//     0xe0, 0x07, 0xff, 0xff, 0xff, 0xe0, 0x03, 0xff, 0xff, 0xff, 0xc0, 0x01, 0xff, 0xff, 0xff, 0x80,
//     0x00, 0xff, 0xff, 0xff, 0x00, 0x00, 0x7f, 0xff, 0xfe, 0x00, 0x00, 0x3f, 0xff, 0xfc, 0x00, 0x00,
//     0x0f, 0xff, 0xf0, 0x00, 0x00, 0x03, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x3c, 0x00, 0x00, 0x00, 0x00,
//     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};

// PROGMEM const unsigned char settings_40[] = {
//     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7e, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00,
//     0x01, 0xe3, 0x80, 0x00, 0x00, 0x01, 0xc1, 0x80, 0x00, 0x00, 0x01, 0x81, 0x80, 0x00, 0x00, 0x01,
//     0x81, 0xc0, 0x00, 0x00, 0x03, 0x80, 0xe0, 0x00, 0x07, 0xef, 0x00, 0xff, 0xe0, 0x0f, 0xfe, 0x00,
//     0x3f, 0xf0, 0x0e, 0x38, 0x00, 0x1c, 0x30, 0x1c, 0x00, 0x00, 0x00, 0x38, 0x18, 0x00, 0x00, 0x00,
//     0x18, 0x38, 0x00, 0x00, 0x00, 0x1c, 0x18, 0x00, 0x7f, 0x00, 0x1c, 0x1c, 0x01, 0xff, 0x80, 0x38,
//     0x0e, 0x01, 0xc3, 0xc0, 0x70, 0x07, 0x03, 0x81, 0xc0, 0xe0, 0x03, 0x03, 0x00, 0xc0, 0xc0, 0x03,
//     0x03, 0x00, 0xe0, 0xc0, 0x03, 0x03, 0x00, 0xe0, 0xc0, 0x03, 0x03, 0x00, 0xc0, 0xc0, 0x07, 0x03,
//     0x81, 0xc0, 0xe0, 0x0e, 0x01, 0xc3, 0xc0, 0x70, 0x1c, 0x01, 0xff, 0x80, 0x38, 0x18, 0x00, 0x7f,
//     0x00, 0x1c, 0x18, 0x00, 0x00, 0x00, 0x1c, 0x18, 0x00, 0x00, 0x00, 0x18, 0x1c, 0x00, 0x00, 0x00,
//     0x38, 0x0e, 0x38, 0x00, 0x1c, 0x30, 0x0f, 0xfe, 0x00, 0x3f, 0xf0, 0x07, 0xff, 0x00, 0xff, 0xe0,
//     0x01, 0x03, 0x80, 0xe0, 0x00, 0x00, 0x01, 0x81, 0xc0, 0x00, 0x00, 0x01, 0x81, 0x80, 0x00, 0x00,
//     0x01, 0xc1, 0x80, 0x00, 0x00, 0x01, 0xe3, 0x80, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00,
//     0x7e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};

// PROGMEM const unsigned char settings_80[] = {
//     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
//     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
//     0x00, 0x00, 0x1f, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xff, 0x00, 0x00,
//     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
//     0xff, 0x7f, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xfb, 0xf7, 0x80, 0x00, 0x00, 0x00,
//     0x00, 0x00, 0x00, 0x01, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xef, 0xde,
//     0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xfe, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00,
//     0x00, 0x03, 0xff, 0xfb, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xbd, 0xff, 0xe0, 0x00,
//     0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xff, 0xdf, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07,
//     0xf7, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x07, 0x00, 0x1f, 0xff, 0x7b, 0xf8, 0x00, 0x70, 0x00,
//     0x00, 0x0f, 0xe0, 0x3f, 0x7f, 0xff, 0xfe, 0x07, 0xf8, 0x00, 0x00, 0x1f, 0xff, 0xff, 0xf7, 0xef,
//     0x7f, 0xff, 0xfc, 0x00, 0x00, 0x3f, 0xff, 0xfe, 0xff, 0xff, 0xef, 0xff, 0xfc, 0x00, 0x00, 0x3e,
//     0xff, 0xfb, 0xfe, 0xfd, 0xff, 0xfd, 0xee, 0x00, 0x00, 0x7b, 0xef, 0xdf, 0xdf, 0xef, 0xde, 0xf7,
//     0xff, 0x00, 0x00, 0x7f, 0xfe, 0xff, 0xfd, 0xff, 0xff, 0xff, 0xbf, 0x00, 0x00, 0xff, 0xbf, 0xff,
//     0x7f, 0xdf, 0x7b, 0xdf, 0xfb, 0x80, 0x01, 0xfe, 0xfb, 0xf7, 0xf7, 0xfd, 0xff, 0xfe, 0xff, 0x80,
//     0x01, 0xef, 0xff, 0xbf, 0xff, 0x7f, 0xff, 0x7b, 0xef, 0xc0, 0x01, 0xff, 0xff, 0xfe, 0xff, 0xf7,
//     0xdf, 0xff, 0xff, 0xc0, 0x03, 0xff, 0xbd, 0xfb, 0xe0, 0x07, 0xfd, 0xef, 0xde, 0xe0, 0x03, 0xed,
//     0xf7, 0xef, 0xc0, 0x01, 0xff, 0xff, 0x7f, 0xe0, 0x03, 0xff, 0xff, 0xbf, 0x00, 0x00, 0x77, 0xbd,
//     0xfd, 0xe0, 0x03, 0xbf, 0xef, 0xfe, 0x00, 0x00, 0x3f, 0xff, 0xff, 0xc0, 0x01, 0xfe, 0xff, 0xfc,
//     0x00, 0x00, 0x1e, 0xff, 0xef, 0xc0, 0x00, 0xf7, 0xfd, 0xf0, 0x01, 0x00, 0x0f, 0xef, 0xbf, 0x00,
//     0x00, 0x7f, 0xdf, 0xd8, 0x09, 0x48, 0x0f, 0xfe, 0xfd, 0x00, 0x00, 0x3f, 0xff, 0xf0, 0x08, 0x48,
//     0x07, 0xbf, 0xfc, 0x00, 0x00, 0x0e, 0xfd, 0xe0, 0x26, 0x24, 0x07, 0xfb, 0xf0, 0x00, 0x00, 0x0f,
//     0xf7, 0xe0, 0x21, 0x92, 0x03, 0xff, 0xd8, 0x00, 0x00, 0x07, 0xdf, 0xa0, 0x98, 0x42, 0x03, 0xbf,
//     0x70, 0x00, 0x00, 0x07, 0xff, 0xe0, 0x42, 0x29, 0x03, 0xfb, 0xf0, 0x00, 0x00, 0x07, 0x7e, 0xe0,
//     0x49, 0x89, 0x03, 0xff, 0xf0, 0x00, 0x00, 0x07, 0xfb, 0xe0, 0x88, 0x44, 0x03, 0xdf, 0xf0, 0x00,
//     0x00, 0x07, 0xef, 0xc0, 0x26, 0x31, 0x83, 0xfe, 0xf0, 0x00, 0x00, 0x07, 0xff, 0xe1, 0x21, 0x84,
//     0x03, 0xbf, 0xd0, 0x00, 0x00, 0x07, 0x7f, 0x60, 0x48, 0x12, 0x03, 0xfb, 0xf0, 0x00, 0x00, 0x0f,
//     0xfd, 0xe0, 0x4a, 0x49, 0x03, 0xff, 0xb0, 0x00, 0x00, 0x0f, 0xef, 0xe0, 0x22, 0x49, 0x07, 0xef,
//     0xf8, 0x00, 0x00, 0x1f, 0x7f, 0xf0, 0x11, 0x22, 0x07, 0x7e, 0xfc, 0x00, 0x00, 0x3f, 0xff, 0x70,
//     0x14, 0x90, 0x0f, 0xff, 0xfe, 0x00, 0x00, 0x7d, 0xfb, 0xf8, 0x02, 0x48, 0x0f, 0xfb, 0xef, 0x00,
//     0x01, 0xff, 0xdf, 0xfc, 0x01, 0x00, 0x1f, 0xdf, 0xbf, 0x80, 0x03, 0xff, 0xff, 0xde, 0x00, 0x00,
//     0x3e, 0xff, 0xff, 0xc0, 0x03, 0xf7, 0xbe, 0xff, 0x00, 0x00, 0x7f, 0xfe, 0xfb, 0xe0, 0x03, 0xfe,
//     0xff, 0xff, 0x80, 0x00, 0xfd, 0xf7, 0xff, 0xe0, 0x03, 0xbf, 0xf7, 0xf7, 0xe0, 0x03, 0xff, 0xdf,
//     0xdf, 0x60, 0x03, 0xfd, 0xff, 0xbf, 0xfe, 0x7f, 0xf7, 0xff, 0xff, 0xc0, 0x01, 0xf7, 0xfe, 0xfe,
//     0xff, 0xff, 0xff, 0x7d, 0xfb, 0xc0, 0x01, 0xff, 0xdf, 0xff, 0xff, 0xff, 0xdf, 0xff, 0xdf, 0x80,
//     0x00, 0xdf, 0xfd, 0xef, 0xdf, 0xff, 0x7d, 0xef, 0xff, 0x80, 0x00, 0xfe, 0xff, 0xfe, 0xfd, 0xed,
//     0xff, 0xff, 0x7e, 0x00, 0x00, 0x7f, 0xef, 0xdf, 0xff, 0xff, 0xfb, 0xfd, 0xf7, 0x00, 0x00, 0x3d,
//     0xff, 0x7f, 0xf7, 0xbf, 0xef, 0xbf, 0xfe, 0x00, 0x00, 0x3f, 0xfd, 0xfb, 0xbf, 0xff, 0x7f, 0xfb,
//     0xfe, 0x00, 0x00, 0x1f, 0xbf, 0xff, 0xfe, 0xf7, 0xff, 0xff, 0xbc, 0x00, 0x00, 0x0f, 0xf0, 0x7f,
//     0xff, 0xff, 0xfd, 0x07, 0xf8, 0x00, 0x00, 0x06, 0x80, 0x1e, 0xef, 0xde, 0xdc, 0x00, 0xf0, 0x00,
//     0x00, 0x00, 0x00, 0x07, 0xfe, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xfb, 0xfb,
//     0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xbf, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00,
//     0x00, 0x03, 0xff, 0xbf, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xf7, 0xfb, 0xc0, 0x00,
//     0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 0xef, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01,
//     0xde, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 0xfe, 0xc0, 0x00, 0x00, 0x00,
//     0x00, 0x00, 0x00, 0x00, 0xfb, 0xfb, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xbf,
//     0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00,
//     0x00, 0x00, 0x3f, 0xf6, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
//     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
//     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};

// PROGMEM const unsigned char light_switch_40[] = {
//     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xff, 0xff, 0x00, 0x00, 0xff, 0xff, 0xff, 0x80, 0x01,
//     0xff, 0xff, 0xff, 0xc0, 0x01, 0xff, 0xff, 0xff, 0xe0, 0x03, 0xc0, 0x0c, 0x01, 0xe0, 0x03, 0xc0,
//     0x00, 0x01, 0xe0, 0x03, 0xc0, 0x00, 0x01, 0xe0, 0x03, 0xc0, 0xff, 0x81, 0xe0, 0x03, 0xc3, 0xff,
//     0xe1, 0xe0, 0x03, 0xc3, 0xff, 0xe1, 0xe0, 0x03, 0xc3, 0xff, 0xf1, 0xe0, 0x03, 0xc3, 0x80, 0xf1,
//     0xe0, 0x03, 0xc3, 0x80, 0xf1, 0xe0, 0x03, 0xc3, 0x80, 0xf1, 0xe0, 0x03, 0xc3, 0x80, 0xf1, 0xe0,
//     0x03, 0xc3, 0x80, 0xf1, 0xe0, 0x03, 0xc3, 0x80, 0xf1, 0xe0, 0x03, 0xc3, 0x80, 0xf1, 0xe0, 0x03,
//     0xc3, 0x80, 0xf1, 0xe0, 0x03, 0xc3, 0xff, 0xf1, 0xe0, 0x03, 0xc3, 0xff, 0xf1, 0xe0, 0x03, 0xc3,
//     0xff, 0xf1, 0xe0, 0x03, 0xc3, 0xff, 0xf1, 0xe0, 0x03, 0xc3, 0xff, 0xf1, 0xe0, 0x03, 0xc3, 0xff,
//     0xf1, 0xe0, 0x03, 0xc3, 0xff, 0xf1, 0xe0, 0x03, 0xc3, 0xff, 0xf1, 0xe0, 0x03, 0xc3, 0xff, 0xf1,
//     0xe0, 0x03, 0xc3, 0xff, 0xe1, 0xe0, 0x03, 0xc3, 0xff, 0xe1, 0xe0, 0x03, 0xc0, 0xff, 0x81, 0xe0,
//     0x03, 0xc0, 0x00, 0x01, 0xe0, 0x03, 0xc0, 0x00, 0x01, 0xe0, 0x03, 0xc0, 0x0c, 0x01, 0xe0, 0x01,
//     0xff, 0xff, 0xff, 0xe0, 0x01, 0xff, 0xff, 0xff, 0xc0, 0x00, 0xff, 0xff, 0xff, 0x80, 0x00, 0x7f,
//     0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};

// PROGMEM const unsigned char light_switch_80[] = {
//     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
//     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x00,
//     0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x01, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
//     0x80, 0x00, 0x00, 0x03, 0xff, 0xbe, 0xfb, 0xef, 0xbe, 0xff, 0xc0, 0x00, 0x00, 0x07, 0xfd, 0xfb,
//     0xef, 0xbe, 0xfb, 0xef, 0xe0, 0x00, 0x00, 0x07, 0xef, 0xff, 0xfc, 0x3f, 0xff, 0xfd, 0xf0, 0x00,
//     0x00, 0x0f, 0x7f, 0xef, 0xbc, 0x1f, 0xef, 0xbf, 0xf0, 0x00, 0x00, 0x0f, 0xff, 0x7f, 0xfc, 0x1e,
//     0xff, 0xfb, 0xb0, 0x00, 0x00, 0x0f, 0xfb, 0xfd, 0xfc, 0x3f, 0xfd, 0xff, 0xf0, 0x00, 0x00, 0x0f,
//     0x7f, 0xff, 0xee, 0x7d, 0xef, 0xef, 0xf8, 0x00, 0x00, 0x0f, 0xef, 0xdf, 0xbf, 0xff, 0xff, 0xbe,
//     0xf8, 0x00, 0x00, 0x0e, 0xfe, 0xfd, 0xff, 0xf7, 0xbf, 0xff, 0xf0, 0x00, 0x00, 0x0f, 0xff, 0xff,
//     0xfb, 0xdf, 0xfb, 0xff, 0xd8, 0x00, 0x00, 0x0f, 0xfb, 0xf7, 0xef, 0xff, 0x7f, 0xbb, 0xf8, 0x00,
//     0x00, 0x0f, 0xbf, 0xbf, 0x40, 0x01, 0xfe, 0xff, 0xb8, 0x00, 0x00, 0x0e, 0xff, 0xfe, 0x00, 0x00,
//     0x3f, 0xf7, 0xf8, 0x00, 0x00, 0x0f, 0xf7, 0xf8, 0x00, 0x00, 0x1d, 0xff, 0x78, 0x00, 0x00, 0x0f,
//     0xfe, 0xe8, 0x00, 0x00, 0x0f, 0xff, 0xf0, 0x00, 0x00, 0x0f, 0xbf, 0xf0, 0x00, 0x00, 0x07, 0xde,
//     0xf8, 0x00, 0x00, 0x0e, 0xff, 0xc0, 0x3f, 0xfe, 0x07, 0xfb, 0xf8, 0x00, 0x00, 0x0f, 0xfb, 0xe0,
//     0xff, 0xff, 0x03, 0xbf, 0xd8, 0x00, 0x00, 0x0f, 0xef, 0x81, 0xff, 0xff, 0x83, 0xff, 0xf8, 0x00,
//     0x00, 0x0f, 0xbf, 0xc1, 0xff, 0xff, 0x81, 0xff, 0x78, 0x00, 0x00, 0x0e, 0xfe, 0xc1, 0xf7, 0x6d,
//     0xc1, 0xed, 0xf0, 0x00, 0x00, 0x0f, 0xff, 0xc1, 0xdf, 0xff, 0xc3, 0xff, 0xf8, 0x00, 0x00, 0x0f,
//     0xfb, 0xc1, 0xfe, 0xff, 0xc1, 0xff, 0xe8, 0x00, 0x00, 0x0f, 0xbf, 0xc1, 0xff, 0xfb, 0xc1, 0xef,
//     0xb8, 0x00, 0x00, 0x0e, 0xff, 0x41, 0xfb, 0xdf, 0x81, 0xfe, 0xf8, 0x00, 0x00, 0x0f, 0xfb, 0xc1,
//     0xef, 0xff, 0xc3, 0xdf, 0xf8, 0x00, 0x00, 0x0f, 0xef, 0xc1, 0xff, 0xfe, 0xc1, 0xfd, 0xf0, 0x00,
//     0x00, 0x0f, 0xbf, 0xc1, 0xfe, 0xf7, 0xc1, 0xff, 0xf8, 0x00, 0x00, 0x0e, 0xff, 0xc1, 0xdf, 0xff,
//     0xc1, 0xf7, 0xd8, 0x00, 0x00, 0x0f, 0xfd, 0xc1, 0xff, 0xdf, 0x83, 0xff, 0x78, 0x00, 0x00, 0x0f,
//     0xff, 0xc1, 0xfb, 0xfd, 0xc1, 0xdf, 0xf8, 0x00, 0x00, 0x0f, 0xbb, 0xc1, 0xff, 0xbf, 0xc1, 0xff,
//     0xf0, 0x00, 0x00, 0x0e, 0xff, 0xc1, 0xdf, 0xff, 0xc1, 0xfb, 0xf8, 0x00, 0x00, 0x0f, 0xff, 0x41,
//     0xfd, 0xf7, 0x43, 0xff, 0xb8, 0x00, 0x00, 0x0f, 0xef, 0xc1, 0xff, 0xff, 0xc1, 0xef, 0xf8, 0x00,
//     0x00, 0x0f, 0xbe, 0xc0, 0x00, 0x00, 0x01, 0xfe, 0xf0, 0x00, 0x00, 0x0e, 0xff, 0xc0, 0x00, 0x00,
//     0x01, 0xff, 0xf8, 0x00, 0x00, 0x0f, 0xfb, 0xc0, 0x00, 0x00, 0x03, 0xef, 0xd8, 0x00, 0x00, 0x0f,
//     0xff, 0xc0, 0x00, 0x00, 0x01, 0xfe, 0xf8, 0x00, 0x00, 0x0f, 0xbf, 0x40, 0x00, 0x00, 0x01, 0xfb,
//     0xf8, 0x00, 0x00, 0x0e, 0xfb, 0xc0, 0x00, 0x00, 0x01, 0xef, 0xf0, 0x00, 0x00, 0x0f, 0xff, 0xc0,
//     0x00, 0x00, 0x03, 0xff, 0xb8, 0x00, 0x00, 0x0f, 0xef, 0xc0, 0x00, 0x00, 0x01, 0xff, 0xf8, 0x00,
//     0x00, 0x0f, 0xbe, 0xc0, 0x00, 0x00, 0x01, 0xfb, 0xf0, 0x00, 0x00, 0x0e, 0xff, 0xc0, 0x00, 0x00,
//     0x01, 0xdf, 0xb8, 0x00, 0x00, 0x0f, 0xff, 0xc0, 0x00, 0x00, 0x03, 0xff, 0xf8, 0x00, 0x00, 0x0f,
//     0xf7, 0xc0, 0x00, 0x00, 0x01, 0xfe, 0xf0, 0x00, 0x00, 0x0f, 0xbf, 0x40, 0x00, 0x00, 0x01, 0xf7,
//     0xf8, 0x00, 0x00, 0x0e, 0xff, 0xc0, 0x00, 0x00, 0x01, 0xff, 0xd8, 0x00, 0x00, 0x0f, 0xfd, 0xc0,
//     0x00, 0x00, 0x03, 0xdf, 0xf8, 0x00, 0x00, 0x0f, 0xef, 0xc0, 0x00, 0x00, 0x03, 0xfd, 0xf8, 0x00,
//     0x00, 0x0f, 0xbf, 0xc0, 0x00, 0x00, 0x03, 0xbf, 0xd8, 0x00, 0x00, 0x0e, 0xff, 0x60, 0x00, 0x00,
//     0x03, 0xff, 0x78, 0x00, 0x00, 0x0f, 0xfb, 0xe0, 0x00, 0x00, 0x03, 0xf7, 0xf8, 0x00, 0x00, 0x0f,
//     0xff, 0xe0, 0x00, 0x00, 0x07, 0xff, 0xf0, 0x00, 0x00, 0x0f, 0xbf, 0xf0, 0x00, 0x00, 0x0f, 0x7e,
//     0xf8, 0x00, 0x00, 0x0e, 0xfb, 0xb8, 0x00, 0x00, 0x1f, 0xf7, 0xe8, 0x00, 0x00, 0x0f, 0xff, 0xfe,
//     0x00, 0x00, 0x3f, 0xdf, 0xf8, 0x00, 0x00, 0x0f, 0xef, 0x7f, 0x80, 0x00, 0xfe, 0xff, 0xb8, 0x00,
//     0x00, 0x0f, 0xbf, 0xff, 0xff, 0xff, 0xfb, 0xfd, 0xf8, 0x00, 0x00, 0x0e, 0xfe, 0xf7, 0xff, 0xff,
//     0xff, 0xff, 0xf0, 0x00, 0x00, 0x0f, 0xfb, 0xff, 0x7f, 0xff, 0xf7, 0xef, 0xf8, 0x00, 0x00, 0x0f,
//     0xff, 0xef, 0xfd, 0xf7, 0xbf, 0xbf, 0x78, 0x00, 0x00, 0x0f, 0xbf, 0xbe, 0xf7, 0x7f, 0xfe, 0xfd,
//     0xf0, 0x00, 0x00, 0x0e, 0xfe, 0xff, 0xfc, 0x3e, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x0f, 0xf7, 0xfd,
//     0xec, 0x1f, 0xef, 0xf7, 0xd0, 0x00, 0x00, 0x0f, 0xff, 0xf7, 0xfc, 0x1f, 0xfe, 0xff, 0xf0, 0x00,
//     0x00, 0x07, 0xbf, 0xdf, 0xdc, 0x3d, 0xfb, 0xef, 0x70, 0x00, 0x00, 0x06, 0xfd, 0xff, 0xff, 0xff,
//     0xbf, 0xff, 0xe0, 0x00, 0x00, 0x03, 0xf7, 0xfe, 0xff, 0xff, 0xff, 0xbd, 0xc0, 0x00, 0x00, 0x01,
//     0xff, 0xf7, 0xf7, 0xf7, 0xf7, 0xff, 0x80, 0x00, 0x00, 0x00, 0xff, 0x7f, 0xdf, 0xbe, 0xff, 0xf7,
//     0x00, 0x00, 0x00, 0x00, 0x1f, 0xff, 0xfe, 0xff, 0xee, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
//     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};

// PROGMEM const unsigned char light_top_40[] = {
//     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x3c, 0x00, 0x00, 0x00,
//     0x00, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x3c, 0x00, 0x00, 0x00, 0x00,
//     0x3c, 0x00, 0x00, 0x00, 0x00, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x3c,
//     0x00, 0x00, 0x00, 0x00, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x3c, 0x00,
//     0x00, 0x00, 0x03, 0xff, 0xc0, 0x00, 0x00, 0x0f, 0xff, 0xf0, 0x00, 0x00, 0x3f, 0xff, 0xfc, 0x00,
//     0x00, 0xff, 0x00, 0xfe, 0x00, 0x01, 0xf8, 0x00, 0x3f, 0x00, 0x03, 0xf0, 0x00, 0x0f, 0xc0, 0x07,
//     0xc0, 0x00, 0x03, 0xc0, 0x07, 0x80, 0x00, 0x01, 0xe0, 0x0f, 0x00, 0x00, 0x00, 0xf0, 0x1e, 0x00,
//     0x00, 0x00, 0xf0, 0x1e, 0x00, 0x00, 0x00, 0x78, 0x1c, 0x00, 0x00, 0x00, 0x78, 0x3c, 0x00, 0x00,
//     0x00, 0x3c, 0x3c, 0x00, 0x00, 0x00, 0x3c, 0x38, 0x00, 0x00, 0x00, 0x1c, 0x3f, 0xff, 0xff, 0xff,
//     0xfc, 0x7f, 0xff, 0xff, 0xff, 0xfc, 0x3f, 0xff, 0xff, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00,
//     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 0x00, 0x00, 0x00,
//     0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x3c, 0x00, 0x00, 0x00, 0x00,
//     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};

// PROGMEM const unsigned char light_top_80[] = {
//     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
//     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
//     0x00, 0x00, 0x0f, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xf0, 0x00, 0x00,
//     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
//     0x1f, 0x78, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xf0, 0x00, 0x00, 0x00, 0x00,
//     0x00, 0x00, 0x00, 0x00, 0x1d, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xd8,
//     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
//     0x00, 0x00, 0x1f, 0x78, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1d, 0xf8, 0x00, 0x00,
//     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xe8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
//     0x1f, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0x78, 0x00, 0x00, 0x00, 0x00,
//     0x00, 0x00, 0x00, 0x00, 0x1d, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xf0,
//     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xd8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
//     0x00, 0x00, 0x1f, 0x78, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1d, 0xf8, 0x00, 0x00,
//     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
//     0x1f, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0x78, 0x00, 0x00, 0x00, 0x00,
//     0x00, 0x00, 0x00, 0x00, 0x1d, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xf8,
//     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xdc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
//     0x00, 0x07, 0xff, 0x7f, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xfb, 0xff, 0xfc, 0x00,
//     0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xf7, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xff,
//     0xdf, 0xdf, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xfb, 0x7e, 0xfe, 0xdf, 0xf0, 0x00, 0x00,
//     0x00, 0x00, 0x3f, 0xef, 0xfb, 0xff, 0xfb, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xff, 0xff, 0xfb,
//     0xff, 0xfe, 0x00, 0x00, 0x00, 0x00, 0xfe, 0xff, 0xdf, 0xbf, 0xf7, 0x7f, 0x00, 0x00, 0x00, 0x01,
//     0xfb, 0xfb, 0xff, 0xff, 0x7f, 0xff, 0x80, 0x00, 0x00, 0x03, 0xff, 0xdf, 0x7b, 0xf7, 0xff, 0xef,
//     0xc0, 0x00, 0x00, 0x07, 0xef, 0xff, 0xff, 0xbf, 0xef, 0x7f, 0xe0, 0x00, 0x00, 0x0f, 0xff, 0x7e,
//     0xf7, 0xff, 0x7d, 0xfd, 0xf0, 0x00, 0x00, 0x1f, 0xdf, 0xf7, 0xff, 0x7d, 0xff, 0xff, 0xf8, 0x00,
//     0x00, 0x3f, 0xfd, 0xff, 0xdf, 0xf7, 0xff, 0xdf, 0xbc, 0x00, 0x00, 0x7f, 0x7f, 0xdf, 0xfd, 0xff,
//     0xef, 0xfd, 0xfe, 0x00, 0x00, 0xfd, 0xf7, 0xfd, 0xff, 0xdf, 0xbe, 0xff, 0xfe, 0x00, 0x00, 0xff,
//     0xff, 0x7f, 0xdf, 0xfe, 0xff, 0xef, 0xef, 0x00, 0x01, 0xf7, 0xff, 0xfb, 0xff, 0x7f, 0xfb, 0xfe,
//     0xff, 0x80, 0x01, 0xff, 0xbd, 0xef, 0xfb, 0xf7, 0xff, 0xbf, 0xff, 0x80, 0x03, 0xef, 0xff, 0xff,
//     0x7f, 0xff, 0xdf, 0xfb, 0xdb, 0xc0, 0x03, 0xfe, 0xf7, 0xbf, 0xf7, 0xde, 0xfe, 0xff, 0xff, 0xc0,
//     0x07, 0xdf, 0xff, 0xff, 0xff, 0x7f, 0xfb, 0xff, 0x7f, 0xe0, 0x07, 0xff, 0xde, 0xfb, 0xdf, 0xfb,
//     0xff, 0xdf, 0xfd, 0xe0, 0x0f, 0xfb, 0xff, 0xef, 0xfd, 0xff, 0xbf, 0xfd, 0xef, 0xf0, 0x0f, 0x7f,
//     0xbd, 0xff, 0x7f, 0xef, 0xfb, 0xff, 0xff, 0xb0, 0x0f, 0xff, 0xff, 0xff, 0xf7, 0xbf, 0xef, 0xb7,
//     0xbf, 0xf0, 0x1f, 0xee, 0xf7, 0xbd, 0xff, 0xfd, 0xff, 0xff, 0xfb, 0x78, 0x1f, 0xff, 0xff, 0xff,
//     0xdf, 0xff, 0xde, 0xfe, 0xff, 0xf8, 0x1e, 0xfd, 0xef, 0x77, 0xfd, 0xf7, 0xff, 0xfb, 0xff, 0xf8,
//     0x3f, 0xef, 0xff, 0xff, 0x7f, 0xdf, 0x7d, 0xef, 0xde, 0xec, 0x3d, 0xff, 0xbd, 0xff, 0xfb, 0xff,
//     0xf7, 0xff, 0xff, 0xfc, 0x3f, 0xdf, 0xff, 0xdd, 0xef, 0xfe, 0xff, 0xdf, 0xfb, 0xdc, 0x3f, 0xfd,
//     0xf7, 0xff, 0xff, 0x7b, 0xff, 0x7e, 0xff, 0xfc, 0x3b, 0xff, 0xff, 0xbf, 0xbf, 0xff, 0xdf, 0xff,
//     0xef, 0x7c, 0x3f, 0x7b, 0xde, 0xfd, 0xff, 0xef, 0xfd, 0xfb, 0xff, 0xfc, 0x1f, 0xef, 0xff, 0xf7,
//     0xfb, 0xff, 0xff, 0xef, 0xbd, 0xe8, 0x0f, 0xff, 0x7b, 0xff, 0xef, 0xbd, 0xef, 0xbf, 0xff, 0xf0,
//     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
//     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
//     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
//     0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01,
//     0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00,
//     0x00, 0x00, 0x00, 0x01, 0xfb, 0xef, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xef, 0xbe,
//     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
//     0x00, 0x00, 0x7e, 0xfa, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xfc, 0x00, 0x00,
//     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xd0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
//     0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};

// PROGMEM const unsigned char volume_30_4[] = {
//     0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x38, 0x00, 0x70, 0x00, 0x00, 0x00, 0x7c, 0x00,
//     0x78, 0x00, 0x00, 0x00, 0xfc, 0x00, 0x3c, 0x00, 0x00, 0x01, 0xfc, 0x00, 0x1e, 0x00, 0x00, 0x03,
//     0xfc, 0x03, 0x0f, 0x00, 0x00, 0x0f, 0xfc, 0x07, 0x87, 0x00, 0x00, 0x1f, 0xfc, 0x07, 0xc7, 0x80,
//     0x00, 0x3f, 0xfc, 0x03, 0xc3, 0x80, 0x1f, 0xff, 0xfc, 0x01, 0xe3, 0xc0, 0x3f, 0xff, 0xfc, 0x30,
//     0xe1, 0xc0, 0x7f, 0xff, 0xfc, 0x78, 0x71, 0xc0, 0x7f, 0xff, 0xfc, 0x38, 0x71, 0xc0, 0x7f, 0xff,
//     0xfc, 0x1c, 0x71, 0xc0, 0x7f, 0xff, 0xfc, 0x1c, 0x70, 0xc0, 0x7f, 0xff, 0xfc, 0x1c, 0x70, 0xc0,
//     0x7f, 0xff, 0xfc, 0x1c, 0x70, 0xc0, 0x7f, 0xff, 0xfc, 0x38, 0x71, 0xc0, 0x7f, 0xff, 0xfc, 0x78,
//     0x71, 0xc0, 0x3f, 0xff, 0xfc, 0x30, 0xe1, 0xc0, 0x1f, 0xff, 0xfc, 0x01, 0xe1, 0xc0, 0x00, 0x3f,
//     0xfc, 0x01, 0xc3, 0x80, 0x00, 0x1f, 0xfc, 0x03, 0xc3, 0x80, 0x00, 0x0f, 0xfc, 0x07, 0x87, 0x00,
//     0x00, 0x07, 0xfc, 0x03, 0x0f, 0x00, 0x00, 0x01, 0xfc, 0x00, 0x1e, 0x00, 0x00, 0x00, 0xfc, 0x00,
//     0x3c, 0x00, 0x00, 0x00, 0x7c, 0x00, 0x7c, 0x00, 0x00, 0x00, 0x38, 0x00, 0x78, 0x00, 0x00, 0x00,
//     0x00, 0x00, 0x20, 0x00};

// PROGMEM const unsigned char volume_30_3[] = {
//     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7c, 0x00,
//     0x00, 0x00, 0x00, 0x00, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x01, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x03,
//     0xfc, 0x03, 0x00, 0x00, 0x00, 0x0f, 0xfc, 0x07, 0x80, 0x00, 0x00, 0x1f, 0xfc, 0x07, 0xc0, 0x00,
//     0x00, 0x3f, 0xfc, 0x03, 0xc0, 0x00, 0x1f, 0xff, 0xfc, 0x01, 0xe0, 0x00, 0x3f, 0xff, 0xfc, 0x30,
//     0xe0, 0x00, 0x7f, 0xff, 0xfc, 0x78, 0x70, 0x00, 0x7f, 0xff, 0xfc, 0x38, 0x70, 0x00, 0x7f, 0xff,
//     0xfc, 0x1c, 0x70, 0x00, 0x7f, 0xff, 0xfc, 0x1c, 0x70, 0x00, 0x7f, 0xff, 0xfc, 0x1c, 0x70, 0x00,
//     0x7f, 0xff, 0xfc, 0x1c, 0x70, 0x00, 0x7f, 0xff, 0xfc, 0x38, 0x70, 0x00, 0x7f, 0xff, 0xfc, 0x78,
//     0x70, 0x00, 0x3f, 0xff, 0xfc, 0x30, 0xe0, 0x00, 0x1f, 0xff, 0xfc, 0x01, 0xe0, 0x00, 0x00, 0x3f,
//     0xfc, 0x01, 0xc0, 0x00, 0x00, 0x1f, 0xfc, 0x03, 0xc0, 0x00, 0x00, 0x0f, 0xfc, 0x07, 0x80, 0x00,
//     0x00, 0x07, 0xfc, 0x03, 0x00, 0x00, 0x00, 0x01, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfc, 0x00,
//     0x00, 0x00, 0x00, 0x00, 0x7c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00,
//     0x00, 0x00, 0x00, 0x00};

// PROGMEM const unsigned char volume_30_2[] = {
//     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7c, 0x00,
//     0x00, 0x00, 0x00, 0x00, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x01, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x03,
//     0xfc, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xfc, 0x00, 0x00, 0x00,
//     0x00, 0x3f, 0xfc, 0x00, 0x00, 0x00, 0x1f, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x3f, 0xff, 0xfc, 0x30,
//     0x00, 0x00, 0x7f, 0xff, 0xfc, 0x78, 0x00, 0x00, 0x7f, 0xff, 0xfc, 0x38, 0x00, 0x00, 0x7f, 0xff,
//     0xfc, 0x1c, 0x00, 0x00, 0x7f, 0xff, 0xfc, 0x1c, 0x00, 0x00, 0x7f, 0xff, 0xfc, 0x1c, 0x00, 0x00,
//     0x7f, 0xff, 0xfc, 0x1c, 0x00, 0x00, 0x7f, 0xff, 0xfc, 0x38, 0x00, 0x00, 0x7f, 0xff, 0xfc, 0x78,
//     0x00, 0x00, 0x3f, 0xff, 0xfc, 0x30, 0x00, 0x00, 0x1f, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x3f,
//     0xfc, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xfc, 0x00, 0x00, 0x00,
//     0x00, 0x07, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x01, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfc, 0x00,
//     0x00, 0x00, 0x00, 0x00, 0x7c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00,
//     0x00, 0x00, 0x00, 0x00};

// PROGMEM const unsigned char volume_30_1[] = {
//     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7c, 0x00,
//     0x00, 0x00, 0x00, 0x00, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x01, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x03,
//     0xfc, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xfc, 0x00, 0x00, 0x00,
//     0x00, 0x3f, 0xfc, 0x00, 0x00, 0x00, 0x1f, 0xff, 0xfc, 0x30, 0x38, 0x00, 0x3f, 0xff, 0xfc, 0x78,
//     0x38, 0x00, 0x7f, 0xff, 0xfc, 0x3c, 0xf0, 0x00, 0x7f, 0xff, 0xfc, 0x1e, 0xe0, 0x00, 0x7f, 0xff,
//     0xfc, 0x0f, 0xc0, 0x00, 0x7f, 0xff, 0xfc, 0x07, 0x80, 0x00, 0x7f, 0xff, 0xfc, 0x07, 0xc0, 0x00,
//     0x7f, 0xff, 0xfc, 0x1f, 0xe0, 0x00, 0x7f, 0xff, 0xfc, 0x3c, 0xf0, 0x00, 0x7f, 0xff, 0xfc, 0x38,
//     0x78, 0x00, 0x3f, 0xff, 0xfc, 0x70, 0x38, 0x00, 0x1f, 0xff, 0xfc, 0x20, 0x10, 0x00, 0x00, 0x3f,
//     0xfc, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xfc, 0x00, 0x00, 0x00,
//     0x00, 0x07, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x01, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfc, 0x00,
//     0x00, 0x00, 0x00, 0x00, 0x7c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00,
//     0x00, 0x00, 0x00, 0x00};

// PROGMEM const unsigned char wifi_40[] = {
//     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
//     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
//     0xff, 0x00, 0x00, 0x00, 0x07, 0xff, 0xe0, 0x00, 0x00, 0x0f, 0xff, 0xf0, 0x00, 0x00, 0x3f, 0xff,
//     0xfc, 0x00, 0x00, 0x7f, 0xff, 0xfe, 0x00, 0x0f, 0xff, 0xff, 0xff, 0xf0, 0x3f, 0xff, 0xff, 0x80,
//     0x7c, 0x7f, 0xff, 0xfc, 0x00, 0x0e, 0x7f, 0xff, 0xf8, 0x00, 0x06, 0xf3, 0x33, 0x38, 0xfe, 0x33,
//     0xe2, 0x33, 0x39, 0xff, 0x73, 0xf2, 0x23, 0xf9, 0xc0, 0x03, 0xf0, 0x03, 0x39, 0xc0, 0x23, 0xf0,
//     0x07, 0x39, 0xfc, 0x73, 0xf0, 0x07, 0x39, 0xfc, 0x73, 0xf8, 0x07, 0x39, 0xf8, 0x73, 0xf8, 0x8f,
//     0x39, 0xc0, 0x73, 0xf8, 0x8f, 0x39, 0xc0, 0x73, 0xfc, 0xcf, 0x38, 0xc0, 0x33, 0x7f, 0xff, 0xf0,
//     0x00, 0x06, 0x7f, 0xff, 0xf0, 0x00, 0x0e, 0x3f, 0xff, 0xc0, 0x00, 0x7c, 0x0f, 0xff, 0xff, 0xff,
//     0xf0, 0x00, 0x7f, 0xff, 0xfe, 0x00, 0x00, 0x3f, 0xff, 0xfc, 0x00, 0x00, 0x0f, 0xff, 0xf0, 0x00,
//     0x00, 0x07, 0xff, 0xe0, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
//     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
//     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};

// // 75 174
// PROGMEM const unsigned char omnitrix_char_1[] = {
//     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
//     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
//     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
//     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
//     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
//     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
//     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
//     0x00, 0x00, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xc0, 0x00, 0x00, 0x00,
//     0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03,
//     0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xf1, 0x00, 0x00, 0x00, 0x00, 0x00,
//     0x00, 0x00, 0x00, 0x07, 0xf9, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xfb, 0xc0,
//     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
//     0x00, 0x03, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xff, 0xe0, 0x00, 0x00,
//     0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f,
//     0xff, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x00,
//     0x00, 0x00, 0x00, 0x0f, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xff, 0xfc,
//     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xff, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
//     0x00, 0x1f, 0xff, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xff, 0xfe, 0x00, 0x00,
//     0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xff, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f,
//     0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xff, 0xfe, 0x00, 0x00, 0x00, 0x00,
//     0x00, 0x00, 0x00, 0x0f, 0xff, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xff, 0xfc,
//     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
//     0x00, 0x0f, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xff, 0xfc, 0x00, 0x00,
//     0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f,
//     0xff, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xff, 0xfe, 0x00, 0x00, 0x00, 0x00,
//     0x00, 0x00, 0x00, 0x3f, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff,
//     0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xff, 0xff, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00,
//     0x0f, 0xff, 0xff, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xff, 0xff, 0xff, 0xff, 0x80,
//     0x00, 0x00, 0x00, 0x00, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff,
//     0xff, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x00, 0x00,
//     0x00, 0x01, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x01, 0xff, 0xff, 0xff, 0xff,
//     0xff, 0xe0, 0x00, 0x00, 0x00, 0x01, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x01,
//     0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x01, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0,
//     0x00, 0x00, 0x00, 0x03, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x03, 0xff, 0xff,
//     0xff, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x03, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x00,
//     0x00, 0x07, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x07, 0xff, 0xff, 0xff, 0xff,
//     0xff, 0xf0, 0x00, 0x00, 0x00, 0x07, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x07,
//     0xfe, 0xff, 0xff, 0xff, 0xdf, 0xf8, 0x00, 0x00, 0x00, 0x07, 0xfc, 0x7f, 0xff, 0xff, 0x9f, 0xf8,
//     0x00, 0x00, 0x00, 0x07, 0xfc, 0x7f, 0xff, 0xff, 0x9f, 0xf8, 0x00, 0x00, 0x00, 0x07, 0xfc, 0x7f,
//     0xff, 0xff, 0x9f, 0xfc, 0x00, 0x00, 0x00, 0x0f, 0xfc, 0x3f, 0xff, 0xff, 0x8f, 0xfc, 0x00, 0x00,
//     0x00, 0x0f, 0xfc, 0x3f, 0xff, 0xff, 0x8f, 0xfc, 0x00, 0x00, 0x00, 0x1f, 0xfc, 0x3f, 0xff, 0xff,
//     0x07, 0xfe, 0x00, 0x00, 0x00, 0x3f, 0xf8, 0x3f, 0xff, 0xff, 0x07, 0xff, 0x00, 0x00, 0x00, 0x7f,
//     0xf8, 0x3f, 0xff, 0xff, 0x07, 0xff, 0x00, 0x00, 0x00, 0x7f, 0xf8, 0x3f, 0xff, 0xff, 0x07, 0xff,
//     0x80, 0x00, 0x00, 0xff, 0xf8, 0x3f, 0xff, 0xff, 0x07, 0xff, 0x80, 0x00, 0x01, 0xff, 0xf8, 0x3f,
//     0xff, 0xff, 0x07, 0xff, 0xc0, 0x00, 0x01, 0xff, 0xf8, 0x3f, 0xff, 0xff, 0x07, 0xff, 0xc0, 0x00,
//     0x01, 0xff, 0xf8, 0x3f, 0xff, 0xff, 0x07, 0xff, 0xe0, 0x00, 0x03, 0xff, 0xf8, 0x3f, 0xff, 0xff,
//     0x07, 0xff, 0xe0, 0x00, 0x03, 0xff, 0xf0, 0x3f, 0xff, 0xff, 0x07, 0xff, 0xf0, 0x00, 0x03, 0xff,
//     0xf0, 0x3f, 0xff, 0xff, 0x07, 0xff, 0xf0, 0x00, 0x03, 0xff, 0xf0, 0x3f, 0xff, 0xff, 0x03, 0xff,
//     0xf0, 0x00, 0x03, 0xff, 0xf0, 0x3f, 0xff, 0xff, 0x03, 0xff, 0xf0, 0x00, 0x03, 0xff, 0xf0, 0x3f,
//     0xff, 0xff, 0x03, 0xff, 0xf8, 0x00, 0x03, 0xff, 0xf0, 0x3f, 0xff, 0xff, 0x03, 0xff, 0xf8, 0x00,
//     0x03, 0xff, 0xf0, 0x3f, 0xff, 0xff, 0x03, 0xff, 0xf8, 0x00, 0x03, 0xff, 0xf0, 0x3f, 0xff, 0xff,
//     0x03, 0xff, 0xf8, 0x00, 0x03, 0xff, 0xf0, 0x3f, 0xff, 0xff, 0x03, 0xff, 0xf8, 0x00, 0x03, 0xff,
//     0xf0, 0x3f, 0xff, 0xff, 0x03, 0xff, 0xf8, 0x00, 0x03, 0xff, 0xf0, 0x3f, 0xff, 0xff, 0x83, 0xff,
//     0xf8, 0x00, 0x03, 0xff, 0xf0, 0x3f, 0xff, 0xff, 0x83, 0xff, 0xf8, 0x00, 0x03, 0xff, 0xf0, 0x3f,
//     0xff, 0xff, 0x83, 0xff, 0xf8, 0x00, 0x03, 0xff, 0xf0, 0x7f, 0xff, 0xff, 0xc3, 0xff, 0xf8, 0x00,
//     0x03, 0xff, 0xf8, 0x7f, 0xff, 0xff, 0xc3, 0xff, 0xf8, 0x00, 0x03, 0xff, 0xf8, 0x7f, 0xff, 0xff,
//     0xc3, 0xff, 0xf8, 0x00, 0x03, 0xff, 0xf8, 0x7f, 0xff, 0xff, 0xe3, 0xff, 0xf8, 0x00, 0x03, 0xff,
//     0xf8, 0x7f, 0xff, 0xff, 0xe7, 0xff, 0xf8, 0x00, 0x03, 0xff, 0xfc, 0x7f, 0xff, 0xff, 0xe7, 0xff,
//     0xf8, 0x00, 0x03, 0xff, 0xfc, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x00, 0x01, 0xff, 0xfe, 0x7f,
//     0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x01, 0xff, 0xfe, 0xff, 0xfb, 0xff, 0xff, 0xff, 0xf0, 0x00,
//     0x01, 0xff, 0xff, 0xff, 0xf9, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x01, 0xff, 0xff, 0xff, 0xf1, 0xff,
//     0xff, 0xff, 0xf0, 0x00, 0x01, 0xff, 0xff, 0xff, 0xf1, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x01, 0xff,
//     0xbf, 0xff, 0xf0, 0xff, 0xff, 0x3f, 0xf0, 0x00, 0x00, 0xff, 0x9f, 0xff, 0xf0, 0xff, 0xfe, 0x1f,
//     0xe0, 0x00, 0x00, 0xff, 0x8f, 0xff, 0xe0, 0xff, 0xfc, 0x3f, 0xe0, 0x00, 0x00, 0xff, 0x8f, 0xff,
//     0xe0, 0xff, 0xfc, 0x3f, 0xe0, 0x00, 0x00, 0xff, 0x87, 0xff, 0xe0, 0x7f, 0xf8, 0x3f, 0xe0, 0x00,
//     0x00, 0xff, 0xc1, 0xff, 0xe0, 0x7f, 0xf8, 0x7f, 0xc0, 0x00, 0x00, 0xff, 0xc0, 0xff, 0xc0, 0x7f,
//     0xf8, 0x7f, 0xc0, 0x00, 0x00, 0x7f, 0xe0, 0xff, 0xc0, 0x7f, 0xf8, 0xff, 0xc0, 0x00, 0x00, 0x7f,
//     0xf0, 0xff, 0xc0, 0x3f, 0xf9, 0xff, 0xc0, 0x00, 0x00, 0x7f, 0xf9, 0xff, 0xc0, 0x3f, 0xfb, 0xff,
//     0xc0, 0x00, 0x00, 0x3f, 0xf9, 0xff, 0x80, 0x3f, 0xff, 0xff, 0x80, 0x00, 0x00, 0x3f, 0xfd, 0xff,
//     0x80, 0x1f, 0xff, 0xff, 0x00, 0x00, 0x00, 0x1f, 0xfd, 0xff, 0x80, 0x1f, 0xff, 0xfe, 0x00, 0x00,
//     0x00, 0x0f, 0x01, 0xff, 0x00, 0x1f, 0xfc, 0x18, 0x00, 0x00, 0x00, 0x04, 0x01, 0xff, 0x00, 0x1f,
//     0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 0x00, 0x1f, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00,
//     0x03, 0xff, 0x00, 0x0f, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xfe, 0x00, 0x0f, 0xfe, 0x00,
//     0x00, 0x00, 0x00, 0x00, 0x03, 0xfe, 0x00, 0x0f, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xfe,
//     0x00, 0x07, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xfc, 0x00, 0x07, 0xfe, 0x00, 0x00, 0x00,
//     0x00, 0x00, 0x07, 0xfc, 0x00, 0x07, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xfc, 0x00, 0x07,
//     0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xfc, 0x00, 0x07, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00,
//     0x0f, 0xf8, 0x00, 0x07, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xf8, 0x00, 0x07, 0xfc, 0x00,
//     0x00, 0x00, 0x00, 0x00, 0x0f, 0xf8, 0x00, 0x03, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xf8,
//     0x00, 0x03, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xf0, 0x00, 0x03, 0xfc, 0x00, 0x00, 0x00,
//     0x00, 0x00, 0x07, 0xf0, 0x00, 0x01, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xf0, 0x00, 0x01,
//     0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xf0, 0x00, 0x01, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00,
//     0x07, 0xf0, 0x00, 0x01, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xf0, 0x00, 0x01, 0xfc, 0x00,
//     0x00, 0x00, 0x00, 0x00, 0x03, 0xf0, 0x00, 0x01, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xf0,
//     0x00, 0x00, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xf0, 0x00, 0x00, 0xfc, 0x00, 0x00, 0x00,
//     0x00, 0x00, 0x03, 0xf0, 0x00, 0x00, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xe0, 0x00, 0x00,
//     0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xe0, 0x00, 0x00, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00,
//     0x03, 0xe0, 0x00, 0x00, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xe0, 0x00, 0x00, 0x7c, 0x00,
//     0x00, 0x00, 0x00, 0x00, 0x01, 0xf0, 0x00, 0x00, 0x7c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xf0,
//     0x00, 0x00, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xf0, 0x00, 0x00, 0xfc, 0x00, 0x00, 0x00,
//     0x00, 0x00, 0x03, 0xf0, 0x00, 0x00, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xf0, 0x00, 0x00,
//     0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xf0, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00,
//     0x0f, 0xf0, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xe0, 0x00, 0x00, 0x7f, 0xc0,
//     0x00, 0x00, 0x00, 0x00, 0x3f, 0xe0, 0x00, 0x00, 0x7f, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xe0,
//     0x00, 0x00, 0x7f, 0xf0, 0x00, 0x00, 0x00, 0x01, 0xff, 0xc0, 0x00, 0x00, 0x3f, 0xf8, 0x00, 0x00,
//     0x00, 0x01, 0xff, 0xc0, 0x00, 0x00, 0x3f, 0xfc, 0x00, 0x00, 0x00, 0x03, 0xff, 0xc0, 0x00, 0x00,
//     0x3f, 0xfe, 0x00, 0x00, 0x00, 0x03, 0xff, 0xc0, 0x00, 0x00, 0x1f, 0xfe, 0x00, 0x00, 0x00, 0x03,
//     0xff, 0xc0, 0x00, 0x00, 0x1f, 0xfe, 0x00, 0x00, 0x00, 0x03, 0xff, 0xc0, 0x00, 0x00, 0x1f, 0xfe,
//     0x00, 0x00, 0x00, 0x03, 0xff, 0x80, 0x00, 0x00, 0x07, 0xfc, 0x00, 0x00, 0x00, 0x01, 0xfe, 0x00,
//     0x00, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
//     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
//     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
//     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
//     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
//     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
//     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
//     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
//     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
//     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};

// PROGMEM const unsigned char omnitrix_char_2[] = {
//     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
//     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
//     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
//     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
//     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
//     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
//     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
//     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
//     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
//     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
//     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
//     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
//     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
//     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
//     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
//     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
//     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
//     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
//     0x00, 0x00, 0x00, 0x78, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0x00,
//     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
//     0x00, 0x00, 0x00, 0x03, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xff,
//     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00,
//     0x00, 0x00, 0x00, 0x00, 0x07, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f,
//     0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x00,
//     0x00, 0x00, 0x00, 0x00, 0x0f, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff,
//     0xff, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x00,
//     0x00, 0x00, 0x00, 0x00, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f,
//     0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
//     0xf0, 0x00, 0x00, 0x00, 0x01, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x01,
//     0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x00, 0x00, 0x00, 0x03, 0xff, 0xff, 0xff, 0xff, 0xff,
//     0xff, 0xff, 0x00, 0x00, 0x00, 0x03, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 0x00, 0x00,
//     0x03, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 0x00, 0x00, 0x07, 0xff, 0xff, 0xff, 0xff,
//     0xff, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x07, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x00,
//     0x00, 0x07, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x0f, 0xff, 0xff, 0xff,
//     0xff, 0xff, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0,
//     0x00, 0x00, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x1f, 0xff, 0xff,
//     0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
//     0xc0, 0x00, 0x00, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x00, 0x02, 0x3f, 0xff,
//     0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x00, 0x03, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
//     0xff, 0xf2, 0x00, 0x03, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf7, 0x00, 0x03, 0xff,
//     0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x03, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
//     0xff, 0xff, 0xff, 0x00, 0x07, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x3f,
//     0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff,
//     0xff, 0xff, 0xff, 0xff, 0xe0, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0,
//     0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x0f, 0xff, 0xff, 0xff, 0xff,
//     0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
//     0xc0, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x1f, 0xff, 0xdf, 0xff,
//     0xff, 0xff, 0xff, 0xff, 0xdf, 0xff, 0x80, 0x1f, 0xff, 0xdf, 0xff, 0xff, 0xff, 0xff, 0xff, 0xdf,
//     0xff, 0x80, 0x0f, 0xff, 0x9f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xcf, 0xff, 0xc0, 0x0f, 0xff, 0xbf,
//     0xff, 0xff, 0xff, 0xff, 0xff, 0xcf, 0xff, 0xc0, 0x0f, 0xff, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff,
//     0xc7, 0xff, 0xc0, 0x07, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0xff, 0xe7, 0xff, 0x80, 0x07, 0xff,
//     0xff, 0xfb, 0xff, 0xff, 0xfe, 0x7f, 0xff, 0xff, 0x80, 0x07, 0xff, 0xff, 0xf3, 0xff, 0xff, 0xfe,
//     0x7f, 0xff, 0xff, 0x00, 0x03, 0xfc, 0xff, 0xe3, 0xff, 0xff, 0xfe, 0x3f, 0xff, 0xff, 0x00, 0x03,
//     0xfd, 0xff, 0xe7, 0xff, 0xff, 0xfe, 0x3f, 0xf9, 0xff, 0x00, 0x03, 0xff, 0xff, 0xe7, 0xff, 0xff,
//     0xfe, 0x1f, 0xf9, 0xfe, 0x00, 0x01, 0xff, 0xff, 0xe7, 0xff, 0xff, 0xfe, 0x1f, 0xff, 0xfe, 0x00,
//     0x01, 0xfd, 0xff, 0xc7, 0xff, 0xff, 0xfe, 0x3f, 0xff, 0xfe, 0x00, 0x01, 0xfd, 0xff, 0xc7, 0xff,
//     0xff, 0xfe, 0x3f, 0xff, 0xfc, 0x00, 0x01, 0xfc, 0xff, 0xc7, 0xff, 0xff, 0xfe, 0x1f, 0xff, 0xfc,
//     0x00, 0x01, 0xfc, 0xff, 0xc7, 0xff, 0xff, 0xfe, 0x1f, 0xf9, 0xfc, 0x00, 0x00, 0xfc, 0xff, 0x87,
//     0xff, 0xff, 0xff, 0x1f, 0xf9, 0xfc, 0x00, 0x00, 0xfc, 0x7f, 0x87, 0xff, 0xff, 0xff, 0x1f, 0xf1,
//     0xf8, 0x00, 0x00, 0xfe, 0x7f, 0x8f, 0xff, 0xff, 0xff, 0x0f, 0xf3, 0xf8, 0x00, 0x00, 0xfe, 0x7f,
//     0x8f, 0xff, 0xff, 0xff, 0x0f, 0xf3, 0xf8, 0x00, 0x00, 0x7e, 0x7f, 0x0f, 0xff, 0xff, 0xff, 0x0f,
//     0xe3, 0xf0, 0x00, 0x00, 0x7f, 0x3f, 0x0f, 0xff, 0xff, 0xff, 0x0f, 0xe3, 0xf0, 0x00, 0x00, 0xff,
//     0xbf, 0x0f, 0xff, 0xff, 0xff, 0x0f, 0xc7, 0xf0, 0x00, 0x00, 0xff, 0xff, 0x0f, 0xff, 0xff, 0xff,
//     0x0f, 0xcf, 0xf0, 0x00, 0x00, 0xff, 0xff, 0x0f, 0xff, 0xff, 0xff, 0x0f, 0xcf, 0xf0, 0x00, 0x00,
//     0xff, 0xbf, 0x0f, 0xff, 0xdf, 0xff, 0x0f, 0xdf, 0xf0, 0x00, 0x01, 0xff, 0xbf, 0x8f, 0xff, 0xdf,
//     0xff, 0x0f, 0xdf, 0xf0, 0x00, 0x01, 0xff, 0x9f, 0x8f, 0xff, 0xdf, 0xff, 0x9f, 0x9f, 0xf0, 0x00,
//     0x01, 0xff, 0xbf, 0xcf, 0xff, 0xcf, 0xff, 0xbf, 0x9f, 0xf0, 0x00, 0x01, 0xfd, 0xbf, 0xcf, 0xff,
//     0x8f, 0xff, 0xff, 0x9f, 0xf8, 0x00, 0x00, 0xfc, 0x3f, 0xef, 0xff, 0x8f, 0xff, 0xff, 0x9f, 0xf0,
//     0x00, 0x00, 0x7c, 0x3f, 0xef, 0xff, 0x8f, 0xff, 0xff, 0x83, 0xf0, 0x00, 0x00, 0x3c, 0x3f, 0xef,
//     0xff, 0x8f, 0xff, 0xff, 0x83, 0xf0, 0x00, 0x00, 0x1c, 0x3f, 0xef, 0xff, 0x8f, 0xff, 0xff, 0x83,
//     0xe0, 0x00, 0x00, 0x00, 0x3f, 0xe7, 0xff, 0x87, 0xff, 0xff, 0x83, 0xc0, 0x00, 0x00, 0x00, 0x3f,
//     0xe7, 0xff, 0x07, 0xff, 0xff, 0x81, 0x00, 0x00, 0x00, 0x00, 0x3e, 0x67, 0xff, 0x07, 0xfe, 0x6f,
//     0x80, 0x00, 0x00, 0x00, 0x00, 0x3f, 0x07, 0xff, 0x07, 0xfe, 0x0f, 0x80, 0x00, 0x00, 0x00, 0x00,
//     0x1f, 0x07, 0xff, 0x07, 0xfe, 0x1f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x07, 0xff, 0x07, 0xfe,
//     0x1f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x0f, 0xff, 0x07, 0xff, 0x0e, 0x00, 0x00, 0x00, 0x00,
//     0x00, 0x00, 0x0f, 0xff, 0x07, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xff, 0x07,
//     0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xff, 0x07, 0xff, 0x80, 0x00, 0x00, 0x00,
//     0x00, 0x00, 0x00, 0x1f, 0xff, 0x0f, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xff,
//     0x0f, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xff, 0x0f, 0xff, 0x80, 0x00, 0x00,
//     0x00, 0x00, 0x00, 0x00, 0x1f, 0xff, 0x0f, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f,
//     0xff, 0x0f, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xff, 0x0f, 0xff, 0x00, 0x00,
//     0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xff, 0x07, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
//     0x0f, 0xff, 0x07, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xfe, 0x07, 0xff, 0x00,
//     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xfe, 0x07, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
//     0x00, 0x07, 0xfe, 0x07, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xfe, 0x03, 0xfe,
//     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xfe, 0x03, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00,
//     0x00, 0x00, 0x03, 0xfe, 0x03, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xfe, 0x03,
//     0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xfe, 0x03, 0xfc, 0x00, 0x00, 0x00, 0x00,
//     0x00, 0x00, 0x00, 0x01, 0xfe, 0x07, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xfe,
//     0x07, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xff, 0x0f, 0xfc, 0x00, 0x00, 0x00,
//     0x00, 0x00, 0x00, 0x00, 0x03, 0xff, 0x0f, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07,
//     0xff, 0x0f, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xff, 0x0f, 0xff, 0x80, 0x00,
//     0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xff, 0x07, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
//     0x7f, 0xfe, 0x07, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xfe, 0x03, 0xff, 0xf0,
//     0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 0xfe, 0x03, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00,
//     0x01, 0xff, 0xfe, 0x03, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 0xfe, 0x03, 0xff,
//     0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xfd, 0xfe, 0x03, 0xfd, 0xf8, 0x00, 0x00, 0x00, 0x00,
//     0x00, 0x00, 0xf1, 0xfc, 0x03, 0xfc, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0xf8, 0x01,
//     0xf8, 0x78, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe0, 0x00, 0x70, 0x10, 0x00, 0x00, 0x00,
//     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
//     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
//     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
//     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
//     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
//     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
//     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
//     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
//     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
//     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
//     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
//     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
//     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
//     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
//     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
//     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
//     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
//     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
//     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
//     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
//     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};

// PROGMEM const unsigned char home_assistant_40[] = {
//     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
//     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x00, 0x00, 0x00, 0x00, 0x7c, 0x00, 0x00, 0x00, 0x00,
//     0xfe, 0x00, 0x00, 0x00, 0x01, 0xff, 0x00, 0x00, 0x00, 0x03, 0xff, 0x80, 0x00, 0x00, 0x07, 0xff,
//     0xc0, 0x00, 0x00, 0x0f, 0xff, 0xe0, 0x00, 0x00, 0x1f, 0xef, 0xf0, 0x00, 0x00, 0x3f, 0xc3, 0xf8,
//     0x00, 0x00, 0x7f, 0x81, 0xfc, 0x00, 0x00, 0xff, 0x81, 0xfe, 0x00, 0x01, 0xff, 0xc3, 0xff, 0x00,
//     0x03, 0xff, 0xe7, 0xff, 0x80, 0x07, 0xff, 0xe7, 0xff, 0xc0, 0x07, 0xff, 0xe7, 0xff, 0xe0, 0x0f,
//     0xff, 0xe7, 0xff, 0xf0, 0x0f, 0xff, 0xe7, 0xc3, 0xf0, 0x0f, 0xff, 0xe7, 0x83, 0xf0, 0x0f, 0xff,
//     0xe7, 0x81, 0xf0, 0x0f, 0xff, 0xe7, 0x83, 0xf0, 0x0f, 0xe7, 0xe7, 0x07, 0xf0, 0x0f, 0xc3, 0xe6,
//     0x3f, 0xf0, 0x0f, 0x81, 0xe4, 0x7f, 0xf0, 0x0f, 0x81, 0xe0, 0xff, 0xf0, 0x0f, 0xc1, 0xe1, 0xff,
//     0xf0, 0x0f, 0xe8, 0xe3, 0xff, 0xf0, 0x0f, 0xfc, 0x67, 0xff, 0xf0, 0x0f, 0xfe, 0x27, 0xff, 0xf0,
//     0x0f, 0xff, 0x07, 0xff, 0xf0, 0x0f, 0xff, 0x87, 0xff, 0xf0, 0x07, 0xff, 0xc7, 0xff, 0xe0, 0x00,
//     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
//     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};

// PROGMEM const unsigned char home_assistant_80[] = {
//     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
//     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
//     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
//     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
//     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
//     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xc0,
//     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
//     0x00, 0x00, 0x1f, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xf8, 0x00, 0x00,
//     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
//     0xff, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00,
//     0x00, 0x00, 0x00, 0x03, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xff, 0xff,
//     0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00,
//     0x00, 0x1f, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xff, 0xff, 0xf8, 0x00,
//     0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xff, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff,
//     0xff, 0xff, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00,
//     0x00, 0x00, 0x03, 0xff, 0xf8, 0x3f, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x07, 0xff, 0xf0, 0x0f,
//     0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xff, 0xe0, 0x0f, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00,
//     0x1f, 0xff, 0xe0, 0x07, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xff, 0xc0, 0x07, 0xff, 0xf8,
//     0x00, 0x00, 0x00, 0x00, 0x7f, 0xff, 0xc0, 0x07, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff,
//     0xc0, 0x07, 0xff, 0xfe, 0x00, 0x00, 0x00, 0x01, 0xff, 0xff, 0xe0, 0x07, 0xff, 0xff, 0x00, 0x00,
//     0x00, 0x03, 0xff, 0xff, 0xe0, 0x0f, 0xff, 0xff, 0x80, 0x00, 0x00, 0x07, 0xff, 0xff, 0xf0, 0x1f,
//     0xff, 0xff, 0xc0, 0x00, 0x00, 0x0f, 0xff, 0xff, 0xf8, 0x3f, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x1f,
//     0xff, 0xff, 0xf8, 0x3f, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x3f, 0xff, 0xff, 0xf8, 0x3f, 0xff, 0xff,
//     0xf8, 0x00, 0x00, 0x7f, 0xff, 0xff, 0xf8, 0x3f, 0xff, 0xff, 0xfc, 0x00, 0x00, 0x7f, 0xff, 0xff,
//     0xf8, 0x3f, 0xff, 0xff, 0xfe, 0x00, 0x00, 0x7f, 0xff, 0xff, 0xf8, 0x3f, 0xff, 0xff, 0xfe, 0x00,
//     0x00, 0xff, 0xff, 0xff, 0xf8, 0x3f, 0xfc, 0x7f, 0xfe, 0x00, 0x00, 0xff, 0xff, 0xff, 0xf8, 0x3f,
//     0xf0, 0x1f, 0xff, 0x00, 0x00, 0xff, 0xff, 0xff, 0xf8, 0x3f, 0xe0, 0x0f, 0xff, 0x00, 0x00, 0xff,
//     0xff, 0xff, 0xf8, 0x3f, 0xe0, 0x07, 0xff, 0x00, 0x00, 0xff, 0xff, 0xff, 0xf8, 0x3f, 0xc0, 0x07,
//     0xff, 0x00, 0x00, 0xff, 0xff, 0xff, 0xf8, 0x3f, 0xc0, 0x07, 0xff, 0x00, 0x00, 0xff, 0xff, 0xff,
//     0xf8, 0x3f, 0xc0, 0x07, 0xff, 0x00, 0x00, 0xff, 0xff, 0xff, 0xf8, 0x3f, 0xc0, 0x07, 0xff, 0x00,
//     0x00, 0xff, 0xff, 0xff, 0xf8, 0x3f, 0x80, 0x0f, 0xff, 0x00, 0x00, 0xff, 0xfe, 0x7f, 0xf8, 0x3f,
//     0x00, 0x0f, 0xff, 0x00, 0x00, 0xff, 0xf8, 0x1f, 0xf8, 0x3e, 0x00, 0x3f, 0xff, 0x00, 0x00, 0xff,
//     0xf0, 0x0f, 0xf8, 0x3c, 0x07, 0xff, 0xff, 0x00, 0x00, 0xff, 0xe0, 0x07, 0xf8, 0x38, 0x0f, 0xff,
//     0xff, 0x00, 0x00, 0xff, 0xe0, 0x07, 0xf8, 0x30, 0x1f, 0xff, 0xff, 0x00, 0x00, 0xff, 0xc0, 0x07,
//     0xf8, 0x20, 0x3f, 0xff, 0xff, 0x00, 0x00, 0xff, 0xe0, 0x07, 0xf8, 0x00, 0x7f, 0xff, 0xff, 0x00,
//     0x00, 0xff, 0xe0, 0x07, 0xf8, 0x00, 0xff, 0xff, 0xff, 0x00, 0x00, 0xff, 0xe0, 0x03, 0xf8, 0x01,
//     0xff, 0xff, 0xff, 0x00, 0x00, 0xff, 0xf0, 0x01, 0xf8, 0x03, 0xff, 0xff, 0xff, 0x00, 0x00, 0xff,
//     0xf8, 0x00, 0xf8, 0x07, 0xff, 0xff, 0xff, 0x00, 0x00, 0xff, 0xff, 0xc0, 0x78, 0x0f, 0xff, 0xff,
//     0xff, 0x00, 0x00, 0xff, 0xff, 0xe0, 0x38, 0x1f, 0xff, 0xff, 0xff, 0x00, 0x00, 0xff, 0xff, 0xf0,
//     0x18, 0x3f, 0xff, 0xff, 0xff, 0x00, 0x00, 0xff, 0xff, 0xf8, 0x08, 0x3f, 0xff, 0xff, 0xff, 0x00,
//     0x00, 0xff, 0xff, 0xfc, 0x04, 0x3f, 0xff, 0xff, 0xff, 0x00, 0x00, 0xff, 0xff, 0xfe, 0x00, 0x3f,
//     0xff, 0xff, 0xff, 0x00, 0x00, 0xff, 0xff, 0xff, 0x00, 0x3f, 0xff, 0xff, 0xff, 0x00, 0x00, 0xff,
//     0xff, 0xff, 0x80, 0x3f, 0xff, 0xff, 0xff, 0x00, 0x00, 0xff, 0xff, 0xff, 0xc0, 0x3f, 0xff, 0xff,
//     0xfe, 0x00, 0x00, 0x7f, 0xff, 0xff, 0xe0, 0x3f, 0xff, 0xff, 0xfe, 0x00, 0x00, 0x3f, 0xff, 0xff,
//     0xf0, 0x3f, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
//     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
//     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
//     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
//     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
//     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};

// Graphics2D *pngBuffer;
static int16_t pngOffsetX = 0;
static int16_t pngOffsetY = 0;

DisplayTask::DisplayTask(const uint8_t task_core) : Task{"Display", 2048 * 4, 1, task_core}
{
  app_state_queue_ = xQueueCreate(1, sizeof(AppState));
  assert(app_state_queue_ != NULL);

  mutex_ = xSemaphoreCreateMutex();
  assert(mutex_ != NULL);
}

DisplayTask::~DisplayTask()
{
  vQueueDelete(app_state_queue_);
  vSemaphoreDelete(mutex_);
}

static void drawPlayButton(TFT_eSprite &spr, int x, int y, int width, int height, uint16_t color)
{
  spr.fillTriangle(
      x, y - height / 2,
      x, y + height / 2,
      x + width, y,
      color);
}

void DisplayTask::run()
{
  tft_.begin();
  tft_.invertDisplay(1);
  tft_.setRotation(SK_DISPLAY_ROTATION);
  tft_.fillScreen(TFT_DARKGREEN);

  ledcSetup(LEDC_CHANNEL_LCD_BACKLIGHT, 5000, SK_BACKLIGHT_BIT_DEPTH);
  ledcAttachPin(PIN_LCD_BACKLIGHT, LEDC_CHANNEL_LCD_BACKLIGHT);
  ledcWrite(LEDC_CHANNEL_LCD_BACKLIGHT, (1 << SK_BACKLIGHT_BIT_DEPTH) - 1);

  log("push menu sprite: ok");

  spr_.setColorDepth(8);

  if (spr_.createSprite(TFT_WIDTH, TFT_HEIGHT) == nullptr)
  {
    log("ERROR: sprite allocation failed!");
    tft_.fillScreen(TFT_RED);
  }
  else
  {
    log("Sprite created!");
    tft_.fillScreen(TFT_PURPLE);
  }
  spr_.setTextColor(0xFFFF, TFT_BLACK);

  Apps apps = Apps();

  MenuApp *menu_app = new MenuApp(&spr_);
  MusicApp *music_app = new MusicApp(&spr_);

  apps.add(0, menu_app);
  apps.add(1, music_app);

  // MenuApp menu_app = ;

  // delay(10 * 1000);

  // TFT_eSprite *spr_p_ = &spr_;

  // spr_p_->fillRect(0, 0, TFT_WIDTH, TFT_HEIGHT, TFT_ORANGE);
  // spr_p_->pushSprite(0, 0);

  // delay(10 * 1000);

  AppState app_state;
  PB_SmartKnobState state;
  ConnectivityState connectivity_state;

  const int RADIUS = TFT_WIDTH / 2;
  const uint16_t FILL_COLOR = spr_.color565(90, 18, 151);
  const uint16_t DOT_COLOR = spr_.color565(80, 100, 200);

  const uint16_t DISABLED_COLOR = spr_.color565(71, 71, 71);

  spr_.setTextDatum(CC_DATUM);
  spr_.setTextColor(TFT_WHITE);

  while (1)
  {
    if (xQueueReceive(app_state_queue_, &app_state, portMAX_DELAY) == pdFALSE)
    {
      continue;
    }

    state = app_state.motor_state;
    connectivity_state = app_state.connectivity_state;

    spr_.fillSprite(TFT_BLACK);

    int32_t num_positions = state.config.max_position - state.config.min_position + 1;
    float adjusted_sub_position = state.sub_position_unit * state.config.position_width_radians;
    if (num_positions > 0)
    {
      if (state.current_position == state.config.min_position && state.sub_position_unit < 0)
      {
        adjusted_sub_position = -logf(1 - state.sub_position_unit * state.config.position_width_radians / 5 / PI * 180) * 5 * PI / 180;
      }
      else if (state.current_position == state.config.max_position && state.sub_position_unit > 0)
      {
        adjusted_sub_position = logf(1 + state.sub_position_unit * state.config.position_width_radians / 5 / PI * 180) * 5 * PI / 180;
      }
    }

    float left_bound = PI / 2;
    float right_bound = 0;
    if (num_positions > 0)
    {
      float range_radians = (state.config.max_position - state.config.min_position) * state.config.position_width_radians;
      left_bound = PI / 2 + range_radians / 2;
      right_bound = PI / 2 - range_radians / 2;
    }
    float raw_angle = left_bound - (state.current_position - state.config.min_position) * state.config.position_width_radians;
    float adjusted_angle = raw_angle - adjusted_sub_position;

    bool sk_demo_mode = strncmp(state.config.text, "SKDEMO_", 7) == 0;

    if (!sk_demo_mode)
    {
      if (num_positions > 1)
      {
        int32_t height = (state.current_position - state.config.min_position) * TFT_HEIGHT / (state.config.max_position - state.config.min_position);
        spr_.fillRect(0, TFT_HEIGHT - height, TFT_WIDTH, height, FILL_COLOR);
      }

      spr_.setFreeFont(&Roboto_Light_60);
      spr_.drawNumber(state.current_position, TFT_WIDTH / 2, TFT_HEIGHT / 2 - VALUE_OFFSET, 1);
      spr_.setFreeFont(&DESCRIPTION_FONT);
      int32_t line_y = TFT_HEIGHT / 2 + DESCRIPTION_Y_OFFSET;
      char *start = state.config.text;
      char *end = start + strlen(state.config.text);
      while (start < end)
      {
        char *newline = strchr(start, '\n');
        if (newline == nullptr)
        {
          newline = end;
        }

        char buf[sizeof(state.config.text)] = {};
        strncat(buf, start, min(sizeof(buf) - 1, (size_t)(newline - start)));
        spr_.drawString(String(buf), TFT_WIDTH / 2, line_y, 1);
        start = newline + 1;
        line_y += spr_.fontHeight(1);
      }

      if (num_positions > 0)
      {
        spr_.drawLine(TFT_WIDTH / 2 + RADIUS * cosf(left_bound), TFT_HEIGHT / 2 - RADIUS * sinf(left_bound), TFT_WIDTH / 2 + (RADIUS - 10) * cosf(left_bound), TFT_HEIGHT / 2 - (RADIUS - 10) * sinf(left_bound), TFT_WHITE);
        spr_.drawLine(TFT_WIDTH / 2 + RADIUS * cosf(right_bound), TFT_HEIGHT / 2 - RADIUS * sinf(right_bound), TFT_WIDTH / 2 + (RADIUS - 10) * cosf(right_bound), TFT_HEIGHT / 2 - (RADIUS - 10) * sinf(right_bound), TFT_WHITE);
      }
      if (DRAW_ARC)
      {
        spr_.drawCircle(TFT_WIDTH / 2, TFT_HEIGHT / 2, RADIUS, TFT_DARKGREY);
      }

      if (num_positions > 0 && ((state.current_position == state.config.min_position && state.sub_position_unit < 0) || (state.current_position == state.config.max_position && state.sub_position_unit > 0)))
      {
        spr_.fillCircle(TFT_WIDTH / 2 + (RADIUS - 10) * cosf(raw_angle), TFT_HEIGHT / 2 - (RADIUS - 10) * sinf(raw_angle), 5, DOT_COLOR);
        if (raw_angle < adjusted_angle)
        {
          for (float r = raw_angle; r <= adjusted_angle; r += 2 * PI / 180)
          {
            spr_.fillCircle(TFT_WIDTH / 2 + (RADIUS - 10) * cosf(r), TFT_HEIGHT / 2 - (RADIUS - 10) * sinf(r), 2, DOT_COLOR);
          }
          spr_.fillCircle(TFT_WIDTH / 2 + (RADIUS - 10) * cosf(adjusted_angle), TFT_HEIGHT / 2 - (RADIUS - 10) * sinf(adjusted_angle), 2, DOT_COLOR);
        }
        else
        {
          for (float r = raw_angle; r >= adjusted_angle; r -= 2 * PI / 180)
          {
            spr_.fillCircle(TFT_WIDTH / 2 + (RADIUS - 10) * cosf(r), TFT_HEIGHT / 2 - (RADIUS - 10) * sinf(r), 2, DOT_COLOR);
          }
          spr_.fillCircle(TFT_WIDTH / 2 + (RADIUS - 10) * cosf(adjusted_angle), TFT_HEIGHT / 2 - (RADIUS - 10) * sinf(adjusted_angle), 2, DOT_COLOR);
        }
      }
      else
      {
        spr_.fillCircle(TFT_WIDTH / 2 + (RADIUS - 10) * cosf(adjusted_angle), TFT_HEIGHT / 2 - (RADIUS - 10) * sinf(adjusted_angle), 5, DOT_COLOR);
      }
    }
    else
    {
      if (strncmp(state.config.text, "SKDEMO_Scroll", 13) == 0)
      {
        spr_.fillRect(0, 0, TFT_WIDTH, TFT_HEIGHT, spr_.color565(150, 0, 0));
        spr_.setFreeFont(&Roboto_Thin_24);
        spr_.drawString("Scroll", TFT_WIDTH / 2, TFT_HEIGHT / 2, 1);
        bool detent = false;
        for (uint8_t i = 0; i < state.config.detent_positions_count; i++)
        {
          if (state.config.detent_positions[i] == state.current_position)
          {
            detent = true;
            break;
          }
        }
        spr_.fillCircle(TFT_WIDTH / 2 + (RADIUS - 16) * cosf(adjusted_angle), TFT_HEIGHT / 2 - (RADIUS - 16) * sinf(adjusted_angle), detent ? 8 : 5, TFT_WHITE);
      }
      else if (strncmp(state.config.text, "SKDEMO_Frames", 13) == 0)
      {
        int32_t width = (state.current_position - state.config.min_position) * TFT_WIDTH / (state.config.max_position - state.config.min_position);
        spr_.fillRect(0, 0, width, TFT_HEIGHT, spr_.color565(0, 150, 0));
        spr_.setFreeFont(&Roboto_Light_60);
        spr_.drawNumber(state.current_position, TFT_WIDTH / 2, TFT_HEIGHT / 2, 1);
        spr_.setFreeFont(&Roboto_Thin_24);
        spr_.drawString("Frame", TFT_WIDTH / 2, TFT_HEIGHT / 2 - DESCRIPTION_Y_OFFSET - VALUE_OFFSET, 1);
      }
      else if (strncmp(state.config.text, "SKDEMO_HVAC", 11) == 0)
      {
        int32_t width = (state.current_position - state.config.min_position) * TFT_WIDTH / (state.config.max_position - state.config.min_position);

        // TODO: make this real team, when sensor is connected
        int current_temp = 21;

        uint32_t cooling_color = spr_.color565(80, 100, 200);
        uint32_t heating_color = spr_.color565(255, 128, 0);

        // draw division lines
        if (num_positions > 0)
        {
          float range_radians = (state.config.max_position - state.config.min_position + 1) * state.config.position_width_radians;

          spr_.drawLine(TFT_WIDTH / 2 + RADIUS * cosf(left_bound), TFT_HEIGHT / 2 - RADIUS * sinf(left_bound), TFT_WIDTH / 2 + (RADIUS - 10) * cosf(left_bound), TFT_HEIGHT / 2 - (RADIUS - 10) * sinf(left_bound), cooling_color);
          spr_.drawLine(TFT_WIDTH / 2 + RADIUS * cosf(right_bound), TFT_HEIGHT / 2 - RADIUS * sinf(right_bound), TFT_WIDTH / 2 + (RADIUS - 10) * cosf(right_bound), TFT_HEIGHT / 2 - (RADIUS - 10) * sinf(right_bound), heating_color);

          char buf_[4];

          uint32_t line_color;
          uint16_t tick_line_length = 10;

          for (int i = 1; i < num_positions - 1; i++)
          {
            if (state.config.min_position + i < current_temp)
            {
              line_color = cooling_color;
              tick_line_length = 10;
            }
            else if (state.config.min_position + i == current_temp)
            {
              line_color = TFT_WHITE;
              tick_line_length = 20;
            }
            else
            {
              line_color = heating_color;
              tick_line_length = 10;
            }
            float line_position = left_bound - (range_radians / num_positions) * i;
            spr_.drawLine(TFT_WIDTH / 2 + RADIUS * cosf(line_position), TFT_HEIGHT / 2 - RADIUS * sinf(line_position), TFT_WIDTH / 2 + (RADIUS - tick_line_length) * cosf(line_position), TFT_HEIGHT / 2 - (RADIUS - tick_line_length) * sinf(line_position), line_color);
          }

          // Draw min/max numbers
          float min_number_position = left_bound + (range_radians / num_positions) * 1.5;
          sprintf(buf_, "%d", state.config.min_position);
          spr_.setTextColor(cooling_color);
          spr_.setFreeFont(&Roboto_Thin_24);
          spr_.drawString(buf_, TFT_WIDTH / 2 + (RADIUS - 15) * cosf(min_number_position), TFT_HEIGHT / 2 - (RADIUS - 15) * sinf(min_number_position), 1);

          float max_number_position = right_bound - (range_radians / num_positions) * 1.5;
          sprintf(buf_, "%d", state.config.max_position);
          spr_.setTextColor(heating_color);
          spr_.setFreeFont(&Roboto_Thin_24);
          spr_.drawString(buf_, TFT_WIDTH / 2 + (RADIUS - 15) * cosf(max_number_position), TFT_HEIGHT / 2 - (RADIUS - 15) * sinf(max_number_position), 1);
        }

        uint32_t snowflake_color = DISABLED_COLOR;
        uint32_t fire_color = DISABLED_COLOR;
        uint32_t wind_color = DISABLED_COLOR;

        // set the moving dot color
        uint32_t dot_color = TFT_WHITE;
        if (state.current_position < current_temp)
        {
          dot_color = cooling_color;
        }
        else if (state.current_position > current_temp)
        {
          dot_color = heating_color;
        }

        // TODO check for positions
        float range_radians = (state.config.max_position - state.config.min_position + 1) * state.config.position_width_radians;

        // draw current mode with text and color
        std::string status = "";
        if (state.current_position > current_temp)
        {
          spr_.setTextColor(heating_color);
          fire_color = heating_color;
          status = "Heating";

          // draw arc of action
          float start_angle = left_bound - (range_radians / num_positions) * (current_temp - state.config.min_position);
          float wanted_angle = left_bound - (range_radians / num_positions) * (state.current_position - state.config.min_position) - adjusted_sub_position;

          for (float r = start_angle; r >= wanted_angle; r -= 2 * PI / 180)
          {
            spr_.fillCircle(TFT_WIDTH / 2 + (RADIUS - 10) * cosf(r), TFT_HEIGHT / 2 - (RADIUS - 10) * sinf(r), 10, dot_color);
          }
        }
        else if (state.current_position == current_temp)
        {
          spr_.setTextColor(TFT_WHITE);
          status = "idle";
          wind_color = TFT_GREENYELLOW;

          // draw arc of action

          float start_angle = left_bound - (range_radians / num_positions) * (current_temp - state.config.min_position);
          float wanted_angle = left_bound - (range_radians / num_positions) * (state.current_position - state.config.min_position) - adjusted_sub_position;

          if (adjusted_sub_position < 0)
          {
            start_angle = left_bound - (range_radians / num_positions) * (state.current_position - state.config.min_position) - adjusted_sub_position;
            wanted_angle = left_bound - (range_radians / num_positions) * (current_temp - state.config.min_position);
          }

          for (float r = start_angle; r >= wanted_angle; r -= 2 * PI / 180)
          {
            spr_.fillCircle(TFT_WIDTH / 2 + (RADIUS - 10) * cosf(r), TFT_HEIGHT / 2 - (RADIUS - 10) * sinf(r), 10, TFT_GREENYELLOW);
          }
        }
        else
        {
          spr_.setTextColor(cooling_color);
          snowflake_color = cooling_color;
          status = "Cooling";

          // draw arc of action
          // draw arc of action
          float start_angle = left_bound - (range_radians / num_positions) * (current_temp - state.config.min_position);
          float wanted_angle = left_bound - (range_radians / num_positions) * (state.current_position - state.config.min_position) - adjusted_sub_position;

          for (float r = start_angle; r <= wanted_angle; r += 2 * PI / 180)
          {
            spr_.fillCircle(TFT_WIDTH / 2 + (RADIUS - 10) * cosf(r), TFT_HEIGHT / 2 - (RADIUS - 10) * sinf(r), 10, dot_color);
          }
        }

        // draw moving dot
        // if (num_positions > 0 && ((state.current_position == state.config.min_position && state.sub_position_unit < 0) || (state.current_position == state.config.max_position && state.sub_position_unit > 0)))
        // {

        //   spr_.fillCircle(TFT_WIDTH / 2 + (RADIUS - 10) * cosf(raw_angle), TFT_HEIGHT / 2 - (RADIUS - 10) * sinf(raw_angle), 5, dot_color);
        //   if (raw_angle < adjusted_angle)
        //   {
        //     for (float r = raw_angle; r <= adjusted_angle; r += 2 * PI / 180)
        //     {
        //       spr_.fillCircle(TFT_WIDTH / 2 + (RADIUS - 10) * cosf(r), TFT_HEIGHT / 2 - (RADIUS - 10) * sinf(r), 2, dot_color);
        //     }
        //     spr_.fillCircle(TFT_WIDTH / 2 + (RADIUS - 10) * cosf(adjusted_angle), TFT_HEIGHT / 2 - (RADIUS - 10) * sinf(adjusted_angle), 2, dot_color);
        //   }
        //   else
        //   {
        //     for (float r = raw_angle; r >= adjusted_angle; r -= 2 * PI / 180)
        //     {
        //       spr_.fillCircle(TFT_WIDTH / 2 + (RADIUS - 10) * cosf(r), TFT_HEIGHT / 2 - (RADIUS - 10) * sinf(r), 2, dot_color);
        //     }
        //     spr_.fillCircle(TFT_WIDTH / 2 + (RADIUS - 10) * cosf(adjusted_angle), TFT_HEIGHT / 2 - (RADIUS - 10) * sinf(adjusted_angle), 2, dot_color);
        //   }
        // }
        // else
        // {
        //   spr_.fillCircle(TFT_WIDTH / 2 + (RADIUS - 10) * cosf(adjusted_angle), TFT_HEIGHT / 2 - (RADIUS - 10) * sinf(adjusted_angle), 5, dot_color);
        // }

        spr_.setFreeFont(&Roboto_Thin_24);
        spr_.drawString(status.c_str(), TFT_WIDTH / 2, TFT_HEIGHT / 2 - DESCRIPTION_Y_OFFSET - VALUE_OFFSET, 1);

        // draw wanted temperature
        spr_.setFreeFont(&Roboto_Light_60);
        char buf_[4];
        sprintf(buf_, "%d°C", state.current_position);
        spr_.drawString(buf_, TFT_WIDTH / 2, TFT_HEIGHT / 2, 1);

        // draw current temperature
        spr_.setTextColor(TFT_WHITE);
        spr_.setFreeFont(&Roboto_Thin_24);
        sprintf(buf_, "%d°C", current_temp);
        spr_.drawString(buf_, TFT_WIDTH / 2, TFT_HEIGHT / 2 + DESCRIPTION_Y_OFFSET + VALUE_OFFSET, 1);

        uint16_t center = TFT_WIDTH / 2;

        // draw bottom icons

        uint16_t icon_size = 20;
        uint16_t icon_margin = 3;

        spr_.drawBitmap(center - icon_size * 2 - icon_margin * 3, TFT_HEIGHT - 30, letter_A, icon_size, icon_size, TFT_WHITE, TFT_BLACK);
        spr_.drawBitmap(center - icon_size - icon_margin, TFT_HEIGHT - 30, snowflake, icon_size, icon_size, snowflake_color, TFT_BLACK);

        spr_.drawBitmap(center + icon_margin, TFT_HEIGHT - 30, fire, icon_size, icon_size, fire_color, TFT_BLACK);
        spr_.drawBitmap(center + icon_size + icon_margin * 3, TFT_HEIGHT - 30, wind, icon_size, icon_size, wind_color, TFT_BLACK);
      }
      else if (strncmp(state.config.text, "SKDEMO_Shades", 13) == 0)
      {
        uint32_t light_background = spr_.color565(150, 150, 150);

        uint32_t shade_bar_color = TFT_OLIVE;
        uint32_t shade_color = spr_.color565(50, 50, 50);

        spr_.fillRect(0, 0, TFT_WIDTH, TFT_HEIGHT, light_background);
        int32_t height = (state.current_position - state.config.min_position) * TFT_HEIGHT / (state.config.max_position - state.config.min_position);
        spr_.fillRect(0, 0, TFT_WIDTH, height, shade_color);
        spr_.fillRect(0, height - 10, TFT_WIDTH, 10, shade_bar_color);

        spr_.setFreeFont(&Roboto_Light_60);
        char buf_[6];

        uint16_t center = TFT_WIDTH / 2;

        uint8_t arrow_size = 50;

        if (state.current_position == 0)
        {
          sprintf(buf_, "%s", "Opened");
          spr_.drawBitmap(center - arrow_size / 2, TFT_HEIGHT - 20 - arrow_size, arrow_down_50, arrow_size, arrow_size, shade_bar_color, light_background);
        }
        else if (state.current_position == 10)
        {
          sprintf(buf_, "%s", "Half");
        }
        else if (state.current_position == 20)
        {
          sprintf(buf_, "%s", "Closed");
          spr_.drawBitmap(center - arrow_size / 2, TFT_HEIGHT - 20 - arrow_size, arrow_up_50, arrow_size, arrow_size, shade_bar_color, shade_color);
        }
        else
        {
          sprintf(buf_, "%d%%", state.current_position * 5);
          // spr_.drawBitmap(center - arrow_size / 2, TFT_HEIGHT - 20 - arrow_size, arrow_up_50, arrow_size, arrow_size, TFT_OLIVE, TFT_TRANSPARENT);
        }

        spr_.drawString(buf_, TFT_WIDTH / 2, TFT_HEIGHT / 2, 1);

        // spr_.drawNumber(state.current_position, TFT_WIDTH / 2, TFT_HEIGHT / 2, 1);
        spr_.setTextColor(TFT_WHITE);
        spr_.setFreeFont(&Roboto_Thin_24);
        spr_.drawString("Bedroom shade", TFT_WIDTH / 2, TFT_HEIGHT / 2 - DESCRIPTION_Y_OFFSET - VALUE_OFFSET, 1);
      }
      else if (strncmp(state.config.text, "SKDEMO_Light_switch", 19) == 0)
      {
        uint32_t off_background = spr_.color565(0, 0, 0);
        uint32_t off_lamp_color = spr_.color565(150, 150, 150);

        uint32_t on_background = spr_.color565(71, 39, 1);
        uint32_t on_lamp_color = spr_.color565(245, 164, 66);

        uint16_t center_h = TFT_WIDTH / 2;
        uint16_t center_v = TFT_WIDTH / 2;

        uint8_t icon_size = 80;

        uint16_t offset_vertical = 20;

        if (state.current_position == 0)
        {
          spr_.fillRect(0, 0, TFT_WIDTH, TFT_HEIGHT, off_background);
          spr_.drawBitmap(center_h - icon_size / 2, center_v - icon_size / 2 - offset_vertical, lamp_regular, icon_size, icon_size, off_lamp_color, off_background);
          spr_.setTextColor(off_lamp_color);
          spr_.setFreeFont(&Roboto_Thin_24);
          spr_.drawString("Kitchen", center_h, center_v + icon_size / 2 + 30 - offset_vertical, 1);
        }
        else
        {
          spr_.fillRect(0, 0, TFT_WIDTH, TFT_HEIGHT, on_background);
          spr_.drawBitmap(center_h - icon_size / 2, center_v - icon_size / 2 - offset_vertical, lamp_solid, icon_size, icon_size, on_lamp_color, on_background);
          spr_.setTextColor(on_lamp_color);
          spr_.setFreeFont(&Roboto_Thin_24);
          spr_.drawString("Kitchen", center_h, center_v + icon_size / 2 + 30 - offset_vertical, 1);
        }

        // set the moving dot color
        uint32_t dot_color = TFT_WHITE;

        if (state.current_position < 1)
        {
          dot_color = off_lamp_color;
        }
        else
        {
          dot_color = on_lamp_color;
        }

        // draw moving dot
        if (num_positions > 0 && ((state.current_position == state.config.min_position && state.sub_position_unit < 0) || (state.current_position == state.config.max_position && state.sub_position_unit > 0)))
        {

          spr_.fillCircle(TFT_WIDTH / 2 + (RADIUS - 10) * cosf(raw_angle), TFT_HEIGHT / 2 - (RADIUS - 10) * sinf(raw_angle), 5, dot_color);
          if (raw_angle < adjusted_angle)
          {
            for (float r = raw_angle; r <= adjusted_angle; r += 2 * PI / 180)
            {
              spr_.fillCircle(TFT_WIDTH / 2 + (RADIUS - 10) * cosf(r), TFT_HEIGHT / 2 - (RADIUS - 10) * sinf(r), 2, dot_color);
            }
            spr_.fillCircle(TFT_WIDTH / 2 + (RADIUS - 10) * cosf(adjusted_angle), TFT_HEIGHT / 2 - (RADIUS - 10) * sinf(adjusted_angle), 2, dot_color);
          }
          else
          {
            for (float r = raw_angle; r >= adjusted_angle; r -= 2 * PI / 180)
            {
              spr_.fillCircle(TFT_WIDTH / 2 + (RADIUS - 10) * cosf(r), TFT_HEIGHT / 2 - (RADIUS - 10) * sinf(r), 2, dot_color);
            }
            spr_.fillCircle(TFT_WIDTH / 2 + (RADIUS - 10) * cosf(adjusted_angle), TFT_HEIGHT / 2 - (RADIUS - 10) * sinf(adjusted_angle), 2, dot_color);
          }
        }
        else
        {
          spr_.fillCircle(TFT_WIDTH / 2 + (RADIUS - 10) * cosf(adjusted_angle), TFT_HEIGHT / 2 - (RADIUS - 10) * sinf(adjusted_angle), 5, dot_color);
        }
      }
      else if (strncmp(state.config.text, "SKDEMO_Music", 12) == 0)
      {
        apps.setActive(1);
        apps.update(app_state);
        apps.renderActive()->pushSprite(0, 0);
      }
      else if (strncmp(state.config.text, "SKDEMO_Menu", 11) == 0)
      {
        apps.setActive(0);
        apps.update(app_state);
        apps.renderActive()->pushSprite(0, 0);
      }
      else if (app_state.ui_id == APP_ID_SETTINGS)
      {
        // wifi status
        // strength
        // ip address
        // name or room
        // SW version

        uint16_t center_h = TFT_WIDTH / 2;
        uint16_t center_v = TFT_WIDTH / 2;

        if (state.current_position == 0)
        {
          // spr_.fillRect(0, 0, TFT_WIDTH, TFT_HEIGHT, TFT_PURPLE);

          spr_.setTextColor(TFT_WHITE);
          spr_.setFreeFont(&Roboto_Thin_24);
          spr_.drawString("Room", center_h, 20, 1);

          spr_.setTextColor(TFT_WHITE);
          spr_.setFreeFont(&Roboto_Thin_24);
          spr_.drawString("Kitchen", center_h, 50, 1);

          spr_.fillRect(0, 70, TFT_WIDTH, 2, DISABLED_COLOR);

          uint8_t wifi_icon_size = 40;

          spr_.drawBitmap(20, 75, wifi_40, wifi_icon_size, wifi_icon_size, TFT_WHITE, TFT_BLACK);

          // wifi_30

          // log(connectivity_state.ssid.c_str());

          std::string ip = connectivity_state.ip_address;
          std::string SSID = connectivity_state.ssid;
          int16_t signal_strength = connectivity_state.signal_strength;
          std::string signal_strength_text = "";

          switch (connectivity_state.signal_strenth_status)
          {
          case 0:
            signal_strength_text = "Excellent";
            break;
          case 1:
            signal_strength_text = "Good";
            break;
          case 2:
            signal_strength_text = "Fair";
            break;
          case 3:
            signal_strength_text = "Poor";
            break;
          case 4:
            signal_strength_text = "No signal";
            break;
          default:
            break;
          }

          char buf_[24];
          spr_.setTextColor(TFT_GREEN);
          spr_.setFreeFont(&Roboto_Thin_20);
          spr_.drawString(signal_strength_text.c_str(), center_h, 94, 1);

          spr_.setTextColor(TFT_WHITE);
          spr_.setFreeFont(&Roboto_Thin_20);
          sprintf(buf_, "%ddb", signal_strength);
          spr_.drawString(buf_, center_h + 75, 94, 1);

          spr_.setTextColor(TFT_WHITE);
          spr_.setFreeFont(&Roboto_Thin_20);
          sprintf(buf_, "SSID: %s", SSID.c_str());
          spr_.drawString(buf_, center_h, 130, 1);

          spr_.setTextColor(TFT_WHITE);
          spr_.setFreeFont(&Roboto_Thin_20);
          sprintf(buf_, "ip: %s", ip.c_str());
          spr_.drawString(buf_, center_h, 160, 1);

          spr_.setTextColor(TFT_WHITE);
          spr_.setFreeFont(&Roboto_Thin_20);
          spr_.drawString("FW: v0.1-demo", center_h, 190, 1);
        }
        else if (state.current_position == 1)
        {
          // ben10 easter egg
          uint32_t backroung_green = TFT_GREENYELLOW;
          uint32_t center_margin = 20;
          spr_.fillRect(0, 0, TFT_WIDTH, TFT_HEIGHT, backroung_green);
          spr_.fillTriangle(0, 0, TFT_WIDTH / 2 - center_margin / 2, center_v, 0, TFT_HEIGHT, TFT_BLACK);
          spr_.fillTriangle(TFT_WIDTH, 0, TFT_WIDTH / 2 + center_margin / 2, center_v, TFT_WIDTH, TFT_HEIGHT, TFT_BLACK);

          uint8_t black_border = 20;
          spr_.fillTriangle(0, 0 + black_border, TFT_WIDTH / 2 - center_margin / 2 - black_border, center_v, 0, TFT_HEIGHT - black_border, DISABLED_COLOR);
          spr_.fillTriangle(TFT_WIDTH, 0 + black_border, TFT_WIDTH / 2 + center_margin / 2 + black_border, center_v, TFT_WIDTH, TFT_HEIGHT - black_border, DISABLED_COLOR);

          for (float r = 0; r >= -6.3; r -= 2 * PI / 180)
          {
            spr_.fillCircle(TFT_WIDTH / 2 + (RADIUS - 10) * cosf(r), TFT_HEIGHT / 2 - (RADIUS - 10) * sinf(r), 11, TFT_BLACK);
          }

          if (adjusted_angle > left_bound)
          {
            adjusted_angle = left_bound;
          }
          else if (adjusted_angle < right_bound)
          {
            adjusted_angle = right_bound;
          }

          spr_.fillCircle(TFT_WIDTH / 2 + (RADIUS - 10) * cosf(adjusted_angle), TFT_HEIGHT / 2 - (RADIUS - 10) * sinf(adjusted_angle), 5, backroung_green);
          spr_.fillCircle(TFT_WIDTH / 2 + (RADIUS - 10) * cosf(adjusted_angle - PI / 2), TFT_HEIGHT / 2 - (RADIUS - 10) * sinf(adjusted_angle - PI / 2), 5, backroung_green);
          spr_.fillCircle(TFT_WIDTH / 2 + (RADIUS - 10) * cosf(adjusted_angle - 2 * PI / 2), TFT_HEIGHT / 2 - (RADIUS - 10) * sinf(adjusted_angle - 2 * PI / 2), 5, backroung_green);
          spr_.fillCircle(TFT_WIDTH / 2 + (RADIUS - 10) * cosf(adjusted_angle - 3 * PI / 2), TFT_HEIGHT / 2 - (RADIUS - 10) * sinf(adjusted_angle - 3 * PI / 2), 5, backroung_green);
        }
        else
        {
          // ben10 easter egg
          uint32_t ben_10_green = TFT_GREENYELLOW;

          uint8_t triangle_offset_h = 20;
          uint8_t triangle_offset_v = 40;
          uint32_t backroung_grey = spr_.color565(0, 0, 0);
          spr_.fillRect(0, 0, TFT_WIDTH, TFT_HEIGHT, ben_10_green);

          uint32_t icon_width = 75;
          uint32_t icon_height = 174;

          if (state.current_position == 2)
          {
            spr_.drawBitmap(center_h - icon_width / 2, center_v - icon_height / 2, omnitrix_char_1, icon_width, icon_height, TFT_BLACK, ben_10_green);
          }
          else if (state.current_position == 3)
          {
            icon_width = 85;
            spr_.drawBitmap(center_h - icon_width / 2, center_v - icon_height / 2, omnitrix_char_2, icon_width, icon_height, TFT_BLACK, ben_10_green);
          }

          spr_.fillTriangle(0, 0, center_h + triangle_offset_h, 0, 0, center_v + triangle_offset_v, TFT_BLACK);
          spr_.fillTriangle(TFT_WIDTH, 0, center_h - triangle_offset_h, 0, TFT_WIDTH, center_v + triangle_offset_v, TFT_BLACK);

          spr_.fillTriangle(0, TFT_HEIGHT, center_h + triangle_offset_h, TFT_HEIGHT, 0, center_v - triangle_offset_v, TFT_BLACK);
          spr_.fillTriangle(TFT_WIDTH, TFT_HEIGHT, center_h - triangle_offset_h, TFT_HEIGHT, TFT_WIDTH, center_v - triangle_offset_v, TFT_BLACK);

          // spr_.fillTriangle(center_h, triangle_offset_v, TFT_WIDTH - triangle_offset_h, center_v, triangle_offset_h, center_v, ben_10_green);
          // spr_.fillTriangle(center_h, TFT_HEIGHT - triangle_offset_v, TFT_WIDTH - triangle_offset_h, center_v, triangle_offset_h, center_v, ben_10_green);

          // draw controls

          for (float r = 0; r >= -6.3; r -= 2 * PI / 180)
          {
            spr_.fillCircle(TFT_WIDTH / 2 + (RADIUS - 10) * cosf(r), TFT_HEIGHT / 2 - (RADIUS - 10) * sinf(r), 11, TFT_BLACK);
          }

          if (adjusted_angle > left_bound)
          {
            adjusted_angle = left_bound;
          }
          else if (adjusted_angle < right_bound)
          {
            adjusted_angle = right_bound;
          }

          spr_.fillCircle(TFT_WIDTH / 2 + (RADIUS - 10) * cosf(adjusted_angle), TFT_HEIGHT / 2 - (RADIUS - 10) * sinf(adjusted_angle), 5, ben_10_green);
          spr_.fillCircle(TFT_WIDTH / 2 + (RADIUS - 10) * cosf(adjusted_angle - PI / 2), TFT_HEIGHT / 2 - (RADIUS - 10) * sinf(adjusted_angle - PI / 2), 5, ben_10_green);
          spr_.fillCircle(TFT_WIDTH / 2 + (RADIUS - 10) * cosf(adjusted_angle - 2 * PI / 2), TFT_HEIGHT / 2 - (RADIUS - 10) * sinf(adjusted_angle - 2 * PI / 2), 5, ben_10_green);
          spr_.fillCircle(TFT_WIDTH / 2 + (RADIUS - 10) * cosf(adjusted_angle - 3 * PI / 2), TFT_HEIGHT / 2 - (RADIUS - 10) * sinf(adjusted_angle - 3 * PI / 2), 5, ben_10_green);
        }
      }
      else if (app_state.ui_id == APP_ID_HOME_ASSISTANT)
      {
        uint16_t center_h = TFT_WIDTH / 2;
        uint16_t center_v = TFT_WIDTH / 2;
        char buf_[10];
        spr_.setTextColor(TFT_WHITE);
        spr_.setFreeFont(&Roboto_Thin_20);
        sprintf(buf_, "%s", "HA ID 1");
        spr_.drawString(buf_, center_h, center_v, 1);
      }
      else if (strncmp(state.config.text, "SKDEMO_Light_dimmer", 19) == 0)
      {

        // shift start and finishy by 90

        float left_bound = PI / 2;
        float right_bound = 0;
        float range_radians = (state.config.max_position - state.config.min_position) * state.config.position_width_radians;

        left_bound = PI / 2;
        right_bound = PI / 2 - range_radians - state.config.position_width_radians;

        float raw_angle = left_bound - (state.current_position - state.config.min_position) * state.config.position_width_radians;
        float adjusted_angle = raw_angle - adjusted_sub_position;

        uint32_t off_background = spr_.color565(0, 0, 0);
        uint32_t off_lamp_color = spr_.color565(150, 150, 150);

        uint32_t on_background = spr_.color565(71, 39, 1);
        uint32_t on_lamp_color = spr_.color565(245, 164, 66);

        uint16_t center_h = TFT_WIDTH / 2;
        uint16_t center_v = TFT_WIDTH / 2;

        uint8_t icon_size = 80;

        uint16_t offset_vertical = 30;

        char buf_[4];
        sprintf(buf_, "%d%%", state.current_position);

        float start_angle = left_bound;
        float wanted_angle = right_bound;

        if (state.current_position == 0)
        {
          spr_.fillRect(0, 0, TFT_WIDTH, TFT_HEIGHT, off_background);
          spr_.drawBitmap(center_h - icon_size / 2, center_v - icon_size / 2 - offset_vertical, lamp_regular, icon_size, icon_size, off_lamp_color, off_background);
          spr_.setTextColor(off_lamp_color);
          spr_.setFreeFont(&Roboto_Thin_24);
          spr_.drawString("Kitchen", center_h, center_v + icon_size / 2 + 30 - offset_vertical, 1);
          spr_.drawString("off", center_h, center_v + icon_size / 2 + 60 - offset_vertical, 1);

          // draw dot movong path
          for (float r = start_angle; r >= wanted_angle; r -= 2 * PI / 180)
          {
            spr_.fillCircle(TFT_WIDTH / 2 + (RADIUS - 10) * cosf(r), TFT_HEIGHT / 2 - (RADIUS - 10) * sinf(r), 10, DISABLED_COLOR);
          }
        }
        else
        {
          spr_.fillRect(0, 0, TFT_WIDTH, TFT_HEIGHT, on_background);
          spr_.drawBitmap(center_h - icon_size / 2, center_v - icon_size / 2 - offset_vertical, lamp_solid, icon_size, icon_size, on_lamp_color, on_background);
          spr_.setTextColor(on_lamp_color);
          spr_.setFreeFont(&Roboto_Thin_24);
          spr_.drawString("Kitchen", center_h, center_v + icon_size / 2 + 30 - offset_vertical, 1);
          spr_.drawString(buf_, center_h, center_v + icon_size / 2 + 60 - offset_vertical, 1);

          // draw dot movong path
          for (float r = start_angle; r >= wanted_angle; r -= 2 * PI / 180)
          {
            spr_.fillCircle(TFT_WIDTH / 2 + (RADIUS - 10) * cosf(r), TFT_HEIGHT / 2 - (RADIUS - 10) * sinf(r), 10, DISABLED_COLOR);
          }

          wanted_angle = left_bound - (range_radians / num_positions) * (state.current_position - state.config.min_position) - adjusted_sub_position - state.config.position_width_radians;
          if (wanted_angle < right_bound - state.config.position_width_radians)
          {
            wanted_angle = right_bound - state.config.position_width_radians;
          }
          for (float r = start_angle; r >= wanted_angle; r -= 2 * PI / 180)
          {
            spr_.fillCircle(TFT_WIDTH / 2 + (RADIUS - 10) * cosf(r), TFT_HEIGHT / 2 - (RADIUS - 10) * sinf(r), 10, on_lamp_color);
          }
        }

        // set the moving dot color
        uint32_t dot_color = TFT_WHITE;

        if (state.current_position < 1)
        {
          dot_color = off_background;
        }
        else
        {
          dot_color = on_background;
        }

        // draw moving dot
        if (num_positions > 0 && ((state.current_position == state.config.min_position && state.sub_position_unit < 0) || (state.current_position == state.config.max_position && state.sub_position_unit > 0)))
        {

          if (adjusted_angle > left_bound)
          {
            adjusted_angle = left_bound;
          }
          else if (adjusted_angle < right_bound)
          {
            adjusted_angle = right_bound;
          }

          spr_.fillCircle(TFT_WIDTH / 2 + (RADIUS - 10) * cosf(adjusted_angle), TFT_HEIGHT / 2 - (RADIUS - 10) * sinf(adjusted_angle), 5, dot_color);
        }
        else
        {
          spr_.fillCircle(TFT_WIDTH / 2 + (RADIUS - 10) * cosf(adjusted_angle), TFT_HEIGHT / 2 - (RADIUS - 10) * sinf(adjusted_angle), 5, dot_color);
        }
      }
      else if (strncmp(state.config.text, "SKDEMO_Speed", 12) == 0)
      {
        spr_.fillRect(0, 0, TFT_WIDTH, TFT_HEIGHT, spr_.color565(0, 0, 150));

        float normalizedFractional = sgn(state.sub_position_unit) *
                                     CLAMP(lerp(state.sub_position_unit * sgn(state.sub_position_unit), 0.1, 0.9, 0, 1), (float)0, (float)1);
        float normalized = state.current_position + normalizedFractional;
        float speed = sgn(normalized) * powf(2, fabsf(normalized) - 1);
        float roundedSpeed = truncf(speed * 10) / 10;

        spr_.setFreeFont(&Roboto_Thin_24);
        if (roundedSpeed == 0)
        {
          spr_.drawString("Paused", TFT_WIDTH / 2, TFT_HEIGHT / 2 + DESCRIPTION_Y_OFFSET + VALUE_OFFSET, 1);

          spr_.fillRect(TFT_WIDTH / 2 + 5, TFT_HEIGHT / 2 - 20, 10, 40, TFT_WHITE);
          spr_.fillRect(TFT_WIDTH / 2 - 5 - 10, TFT_HEIGHT / 2 - 20, 10, 40, TFT_WHITE);
        }
        else
        {
          char buf[10];
          snprintf(buf, sizeof(buf), "%0.1fx", roundedSpeed);
          spr_.drawString(buf, TFT_WIDTH / 2, TFT_HEIGHT / 2 + DESCRIPTION_Y_OFFSET + VALUE_OFFSET, 1);

          uint16_t x = TFT_WIDTH / 2;
          for (uint8_t i = 0; i < max(1, abs(state.current_position)); i++)
          {
            drawPlayButton(spr_, x, TFT_HEIGHT / 2, sgn(roundedSpeed) * 20, 40, TFT_WHITE);
            x += sgn(roundedSpeed) * 20;
          }
        }
      }
    }

    if (app_state.ui_id != 0)
    {
      spr_.pushSprite(0, 0);
    }

    {
      SemaphoreGuard lock(mutex_);
      ledcWrite(LEDC_CHANNEL_LCD_BACKLIGHT, brightness_);
    }
    delay(5);
  }
}

QueueHandle_t DisplayTask::getKnobStateQueue()
{
  return app_state_queue_;
}

void DisplayTask::setBrightness(uint16_t brightness)
{
  SemaphoreGuard lock(mutex_);
  brightness_ = brightness >> (16 - SK_BACKLIGHT_BIT_DEPTH);
}

void DisplayTask::setLogger(Logger *logger)
{
  logger_ = logger;
}

void DisplayTask::log(const char *msg)
{
  if (logger_ != nullptr)
  {
    logger_->log(msg);
  }
}

#endif